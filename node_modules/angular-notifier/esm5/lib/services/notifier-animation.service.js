/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { fade } from '../animation-presets/fade.animation-preset';
import { slide } from '../animation-presets/slide.animation-preset';
/**
 * Notifier animation service
 */
var NotifierAnimationService = /** @class */ (function () {
    /**
     * Constructor
     */
    function NotifierAnimationService() {
        this.animationPresets = {
            fade: fade,
            slide: slide
        };
    }
    /**
     * Get animation data
     *
     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation
     * direction (either in or out) as well as the notifications (and its attributes) itself.
     *
     * @param   direction    Animation direction, either in or out
     * @param   notification Notification the animation data should be generated for
     * @returns Animation information
     */
    /**
     * Get animation data
     *
     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation
     * direction (either in or out) as well as the notifications (and its attributes) itself.
     *
     * @param {?} direction    Animation direction, either in or out
     * @param {?} notification Notification the animation data should be generated for
     * @return {?} Animation information
     */
    NotifierAnimationService.prototype.getAnimationData = /**
     * Get animation data
     *
     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation
     * direction (either in or out) as well as the notifications (and its attributes) itself.
     *
     * @param {?} direction    Animation direction, either in or out
     * @param {?} notification Notification the animation data should be generated for
     * @return {?} Animation information
     */
    function (direction, notification) {
        // Get all necessary animation data
        /** @type {?} */
        var keyframes;
        /** @type {?} */
        var duration;
        /** @type {?} */
        var easing;
        if (direction === 'show') {
            keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);
            duration = notification.component.getConfig().animations.show.speed;
            easing = notification.component.getConfig().animations.show.easing;
        }
        else {
            keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);
            duration = notification.component.getConfig().animations.hide.speed;
            easing = notification.component.getConfig().animations.hide.easing;
        }
        // Build and return animation data
        return {
            keyframes: [
                keyframes.from,
                keyframes.to
            ],
            options: {
                duration: duration,
                easing: easing,
                fill: 'forwards' // Keep the newly painted state after the animation finished
            }
        };
    };
    NotifierAnimationService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    NotifierAnimationService.ctorParameters = function () { return []; };
    return NotifierAnimationService;
}());
export { NotifierAnimationService };
if (false) {
    /**
     * List of animation presets (currently static)
     * @type {?}
     * @private
     */
    NotifierAnimationService.prototype.animationPresets;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItYW5pbWF0aW9uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9hbmd1bGFyLW5vdGlmaWVyLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL25vdGlmaWVyLWFuaW1hdGlvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBSTNDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSw0Q0FBNEMsQ0FBQztBQUNsRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE1BQU0sNkNBQTZDLENBQUM7Ozs7QUFLcEU7SUFVQzs7T0FFRztJQUNIO1FBQ0MsSUFBSSxDQUFDLGdCQUFnQixHQUFHO1lBQ3ZCLElBQUksTUFBQTtZQUNKLEtBQUssT0FBQTtTQUNMLENBQUM7SUFDSCxDQUFDO0lBRUQ7Ozs7Ozs7OztPQVNHOzs7Ozs7Ozs7OztJQUNJLG1EQUFnQjs7Ozs7Ozs7OztJQUF2QixVQUF5QixTQUEwQixFQUFFLFlBQWtDOzs7WUFHbEYsU0FBMkM7O1lBQzNDLFFBQWdCOztZQUNoQixNQUFjO1FBQ2xCLElBQUssU0FBUyxLQUFLLE1BQU0sRUFBRztZQUMzQixTQUFTLEdBQUcsSUFBSSxDQUFDLGdCQUFnQixDQUFFLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUUsQ0FBQyxJQUFJLENBQUUsWUFBWSxDQUFFLENBQUM7WUFDcEgsUUFBUSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUM7WUFDcEUsTUFBTSxHQUFHLFlBQVksQ0FBQyxTQUFTLENBQUMsU0FBUyxFQUFFLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7U0FDbkU7YUFBTTtZQUNOLFNBQVMsR0FBRyxJQUFJLENBQUMsZ0JBQWdCLENBQUUsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFDLElBQUksQ0FBRSxZQUFZLENBQUUsQ0FBQztZQUNwSCxRQUFRLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQztZQUNwRSxNQUFNLEdBQUcsWUFBWSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEVBQUUsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQztTQUNuRTtRQUVELGtDQUFrQztRQUNsQyxPQUFPO1lBQ04sU0FBUyxFQUFFO2dCQUNWLFNBQVMsQ0FBQyxJQUFJO2dCQUNkLFNBQVMsQ0FBQyxFQUFFO2FBQ1o7WUFDRCxPQUFPLEVBQUU7Z0JBQ1IsUUFBUSxVQUFBO2dCQUNSLE1BQU0sUUFBQTtnQkFDTixJQUFJLEVBQUUsVUFBVSxDQUFDLDREQUE0RDthQUM3RTtTQUNELENBQUM7SUFFSCxDQUFDOztnQkEzREQsVUFBVTs7OztJQTZEWCwrQkFBQztDQUFBLEFBN0RELElBNkRDO1NBNURZLHdCQUF3Qjs7Ozs7OztJQUtwQyxvREFFRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgTm90aWZpZXJBbmltYXRpb25EYXRhLCBOb3RpZmllckFuaW1hdGlvblByZXNldCwgTm90aWZpZXJBbmltYXRpb25QcmVzZXRLZXlmcmFtZXMgfSBmcm9tICcuLi9tb2RlbHMvbm90aWZpZXItYW5pbWF0aW9uLm1vZGVsJztcbmltcG9ydCB7IE5vdGlmaWVyTm90aWZpY2F0aW9uIH0gZnJvbSAnLi4vbW9kZWxzL25vdGlmaWVyLW5vdGlmaWNhdGlvbi5tb2RlbCc7XG5pbXBvcnQgeyBmYWRlIH0gZnJvbSAnLi4vYW5pbWF0aW9uLXByZXNldHMvZmFkZS5hbmltYXRpb24tcHJlc2V0JztcbmltcG9ydCB7IHNsaWRlIH0gZnJvbSAnLi4vYW5pbWF0aW9uLXByZXNldHMvc2xpZGUuYW5pbWF0aW9uLXByZXNldCc7XG5cbi8qKlxuICogTm90aWZpZXIgYW5pbWF0aW9uIHNlcnZpY2VcbiAqL1xuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIE5vdGlmaWVyQW5pbWF0aW9uU2VydmljZSB7XG5cblx0LyoqXG5cdCAqIExpc3Qgb2YgYW5pbWF0aW9uIHByZXNldHMgKGN1cnJlbnRseSBzdGF0aWMpXG5cdCAqL1xuXHRwcml2YXRlIHJlYWRvbmx5IGFuaW1hdGlvblByZXNldHM6IHtcblx0XHRbIGFuaW1hdGlvblByZXNldE5hbWU6IHN0cmluZyBdOiBOb3RpZmllckFuaW1hdGlvblByZXNldFxuXHR9O1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RvclxuXHQgKi9cblx0cHVibGljIGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMuYW5pbWF0aW9uUHJlc2V0cyA9IHtcblx0XHRcdGZhZGUsXG5cdFx0XHRzbGlkZVxuXHRcdH07XG5cdH1cblxuXHQvKipcblx0ICogR2V0IGFuaW1hdGlvbiBkYXRhXG5cdCAqXG5cdCAqIFRoaXMgbWV0aG9kIGdlbmVyYXRlcyBhbGwgZGF0YSB0aGUgV2ViIEFuaW1hdGlvbnMgQVBJIG5lZWRzIHRvIGFuaW1hdGUgb3VyIG5vdGlmaWNhdGlvbi4gVGhlIHJlc3VsdCBkZXBlbmRzIG9uIGJvdGggdGhlIGFuaW1hdGlvblxuXHQgKiBkaXJlY3Rpb24gKGVpdGhlciBpbiBvciBvdXQpIGFzIHdlbGwgYXMgdGhlIG5vdGlmaWNhdGlvbnMgKGFuZCBpdHMgYXR0cmlidXRlcykgaXRzZWxmLlxuXHQgKlxuXHQgKiBAcGFyYW0gICBkaXJlY3Rpb24gICAgQW5pbWF0aW9uIGRpcmVjdGlvbiwgZWl0aGVyIGluIG9yIG91dFxuXHQgKiBAcGFyYW0gICBub3RpZmljYXRpb24gTm90aWZpY2F0aW9uIHRoZSBhbmltYXRpb24gZGF0YSBzaG91bGQgYmUgZ2VuZXJhdGVkIGZvclxuXHQgKiBAcmV0dXJucyBBbmltYXRpb24gaW5mb3JtYXRpb25cblx0ICovXG5cdHB1YmxpYyBnZXRBbmltYXRpb25EYXRhKCBkaXJlY3Rpb246ICdzaG93JyB8ICdoaWRlJywgbm90aWZpY2F0aW9uOiBOb3RpZmllck5vdGlmaWNhdGlvbiApOiBOb3RpZmllckFuaW1hdGlvbkRhdGEge1xuXG5cdFx0Ly8gR2V0IGFsbCBuZWNlc3NhcnkgYW5pbWF0aW9uIGRhdGFcblx0XHRsZXQga2V5ZnJhbWVzOiBOb3RpZmllckFuaW1hdGlvblByZXNldEtleWZyYW1lcztcblx0XHRsZXQgZHVyYXRpb246IG51bWJlcjtcblx0XHRsZXQgZWFzaW5nOiBzdHJpbmc7XG5cdFx0aWYgKCBkaXJlY3Rpb24gPT09ICdzaG93JyApIHtcblx0XHRcdGtleWZyYW1lcyA9IHRoaXMuYW5pbWF0aW9uUHJlc2V0c1sgbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKS5hbmltYXRpb25zLnNob3cucHJlc2V0IF0uc2hvdyggbm90aWZpY2F0aW9uICk7XG5cdFx0XHRkdXJhdGlvbiA9IG5vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCkuYW5pbWF0aW9ucy5zaG93LnNwZWVkO1xuXHRcdFx0ZWFzaW5nID0gbm90aWZpY2F0aW9uLmNvbXBvbmVudC5nZXRDb25maWcoKS5hbmltYXRpb25zLnNob3cuZWFzaW5nO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRrZXlmcmFtZXMgPSB0aGlzLmFuaW1hdGlvblByZXNldHNbIG5vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCkuYW5pbWF0aW9ucy5oaWRlLnByZXNldCBdLmhpZGUoIG5vdGlmaWNhdGlvbiApO1xuXHRcdFx0ZHVyYXRpb24gPSBub3RpZmljYXRpb24uY29tcG9uZW50LmdldENvbmZpZygpLmFuaW1hdGlvbnMuaGlkZS5zcGVlZDtcblx0XHRcdGVhc2luZyA9IG5vdGlmaWNhdGlvbi5jb21wb25lbnQuZ2V0Q29uZmlnKCkuYW5pbWF0aW9ucy5oaWRlLmVhc2luZztcblx0XHR9XG5cblx0XHQvLyBCdWlsZCBhbmQgcmV0dXJuIGFuaW1hdGlvbiBkYXRhXG5cdFx0cmV0dXJuIHtcblx0XHRcdGtleWZyYW1lczogW1xuXHRcdFx0XHRrZXlmcmFtZXMuZnJvbSxcblx0XHRcdFx0a2V5ZnJhbWVzLnRvXG5cdFx0XHRdLFxuXHRcdFx0b3B0aW9uczoge1xuXHRcdFx0XHRkdXJhdGlvbixcblx0XHRcdFx0ZWFzaW5nLFxuXHRcdFx0XHRmaWxsOiAnZm9yd2FyZHMnIC8vIEtlZXAgdGhlIG5ld2x5IHBhaW50ZWQgc3RhdGUgYWZ0ZXIgdGhlIGFuaW1hdGlvbiBmaW5pc2hlZFxuXHRcdFx0fVxuXHRcdH07XG5cblx0fVxuXG59XG4iXX0=