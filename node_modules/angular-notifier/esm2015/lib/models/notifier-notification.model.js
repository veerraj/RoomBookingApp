/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
/**
 * Notification
 *
 * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.
 */
export class NotifierNotification {
    /**
     * Constructor
     *
     * @param {?} options Notifier options
     */
    constructor(options) {
        /**
         * The template to customize
         * the appearance of the notification
         */
        this.template = null;
        Object.assign(this, options);
        // If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser
        // datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,
        // is not possible due to the action queue concept.
        if (options.id === undefined) {
            this.id = `ID_${new Date().getTime()}`;
        }
    }
}
if (false) {
    /**
     * Unique notification ID, can be set manually to control the notification from outside later on
     * @type {?}
     */
    NotifierNotification.prototype.id;
    /**
     * Notification type, will be used for constructing an appropriate class name
     * @type {?}
     */
    NotifierNotification.prototype.type;
    /**
     * Notification message
     * @type {?}
     */
    NotifierNotification.prototype.message;
    /**
     * The template to customize
     * the appearance of the notification
     * @type {?}
     */
    NotifierNotification.prototype.template;
    /**
     * Component reference of this notification, created and set during creation time
     * @type {?}
     */
    NotifierNotification.prototype.component;
}
/**
 * Notifiction options
 *
 * This interface describes which information are needed to create a new notification, or in other words, which information the external API
 * call must provide.
 * @record
 */
export function NotifierNotificationOptions() { }
if (false) {
    /**
     * Notification ID, optional
     * @type {?|undefined}
     */
    NotifierNotificationOptions.prototype.id;
    /**
     * Notification type
     * @type {?}
     */
    NotifierNotificationOptions.prototype.type;
    /**
     * Notificatin message
     * @type {?}
     */
    NotifierNotificationOptions.prototype.message;
    /**
     * The template to customize
     * the appearance of the notification
     * @type {?|undefined}
     */
    NotifierNotificationOptions.prototype.template;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsLmpzIiwic291cmNlUm9vdCI6Im5nOi8vYW5ndWxhci1ub3RpZmllci8iLCJzb3VyY2VzIjpbImxpYi9tb2RlbHMvbm90aWZpZXItbm90aWZpY2F0aW9uLm1vZGVsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQVFBLE1BQU0sT0FBTyxvQkFBb0I7Ozs7OztJQWdDaEMsWUFBbUIsT0FBb0M7Ozs7O1FBWmhELGFBQVEsR0FBc0IsSUFBSSxDQUFDO1FBYXpDLE1BQU0sQ0FBQyxNQUFNLENBQUMsSUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBRTdCLGdJQUFnSTtRQUNoSSxtSUFBbUk7UUFDbkksbURBQW1EO1FBQ25ELElBQUksT0FBTyxDQUFDLEVBQUUsS0FBSyxTQUFTLEVBQUU7WUFDN0IsSUFBSSxDQUFDLEVBQUUsR0FBRyxNQUFNLElBQUksSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLEVBQUUsQ0FBQztTQUN2QztJQUNGLENBQUM7Q0FDRDs7Ozs7O0lBdENBLGtDQUFrQjs7Ozs7SUFLbEIsb0NBQW9COzs7OztJQUtwQix1Q0FBdUI7Ozs7OztJQU12Qix3Q0FBMEM7Ozs7O0lBSzFDLHlDQUFnRDs7Ozs7Ozs7O0FBeUJqRCxpREFxQkM7Ozs7OztJQWpCQSx5Q0FBWTs7Ozs7SUFLWiwyQ0FBYTs7Ozs7SUFLYiw4Q0FBZ0I7Ozs7OztJQU1oQiwrQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOb3RpZmllck5vdGlmaWNhdGlvbkNvbXBvbmVudCB9IGZyb20gJy4uL2NvbXBvbmVudHMvbm90aWZpZXItbm90aWZpY2F0aW9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG4vKipcbiAqIE5vdGlmaWNhdGlvblxuICpcbiAqIFRoaXMgY2xhc3MgZGVzY3JpYmVzIHRoZSBzdHJ1Y3R1cmUgb2YgYSBub3RpZmljdGlvbiwgaW5jbHVkaW5nIGFsbCBpbmZvcm1hdGlvbiBpdCBuZWVkcyB0byBsaXZlLCBhbmQgZXZlcnlvbmUgZWxzZSBuZWVkcyB0byB3b3JrIHdpdGggaXQuXG4gKi9cbmV4cG9ydCBjbGFzcyBOb3RpZmllck5vdGlmaWNhdGlvbiB7XG5cdC8qKlxuXHQgKiBVbmlxdWUgbm90aWZpY2F0aW9uIElELCBjYW4gYmUgc2V0IG1hbnVhbGx5IHRvIGNvbnRyb2wgdGhlIG5vdGlmaWNhdGlvbiBmcm9tIG91dHNpZGUgbGF0ZXIgb25cblx0ICovXG5cdHB1YmxpYyBpZDogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBOb3RpZmljYXRpb24gdHlwZSwgd2lsbCBiZSB1c2VkIGZvciBjb25zdHJ1Y3RpbmcgYW4gYXBwcm9wcmlhdGUgY2xhc3MgbmFtZVxuXHQgKi9cblx0cHVibGljIHR5cGU6IHN0cmluZztcblxuXHQvKipcblx0ICogTm90aWZpY2F0aW9uIG1lc3NhZ2Vcblx0ICovXG5cdHB1YmxpYyBtZXNzYWdlOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFRoZSB0ZW1wbGF0ZSB0byBjdXN0b21pemVcblx0ICogdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIG5vdGlmaWNhdGlvblxuXHQgKi9cblx0cHVibGljIHRlbXBsYXRlPzogVGVtcGxhdGVSZWY8YW55PiA9IG51bGw7XG5cblx0LyoqXG5cdCAqIENvbXBvbmVudCByZWZlcmVuY2Ugb2YgdGhpcyBub3RpZmljYXRpb24sIGNyZWF0ZWQgYW5kIHNldCBkdXJpbmcgY3JlYXRpb24gdGltZVxuXHQgKi9cblx0cHVibGljIGNvbXBvbmVudDogTm90aWZpZXJOb3RpZmljYXRpb25Db21wb25lbnQ7XG5cblx0LyoqXG5cdCAqIENvbnN0cnVjdG9yXG5cdCAqXG5cdCAqIEBwYXJhbSBvcHRpb25zIE5vdGlmaWVyIG9wdGlvbnNcblx0ICovXG5cdHB1YmxpYyBjb25zdHJ1Y3RvcihvcHRpb25zOiBOb3RpZmllck5vdGlmaWNhdGlvbk9wdGlvbnMpIHtcblx0XHRPYmplY3QuYXNzaWduKHRoaXMsIG9wdGlvbnMpO1xuXG5cdFx0Ly8gSWYgbm90IHNldCBtYW51YWxseSwgd2UgaGF2ZSB0byBjcmVhdGUgYSB1bmlxdWUgbm90aWZpY2F0aW9uIElEIGJ5IG91cnNlbHZlcy4gVGhlIElEIGdlbmVyYXRpb24gcmVsaWVzIG9uIHRoZSBjdXJyZW50IGJyb3dzZXJcblx0XHQvLyBkYXRldGltZSBpbiBtcywgaW4gcHJhdGljdWxhciB0aGUgbW9tZW50IHRoaXMgbm90aWZpY2F0aW9uIGdldHMgY29uc3RydWN0ZWQuIENvbmN1cnJlbmN5LCBhbmQgdGh1cyB0d28gSURzIGJlaW5nIHRoZSBleGFjdCBzYW1lLFxuXHRcdC8vIGlzIG5vdCBwb3NzaWJsZSBkdWUgdG8gdGhlIGFjdGlvbiBxdWV1ZSBjb25jZXB0LlxuXHRcdGlmIChvcHRpb25zLmlkID09PSB1bmRlZmluZWQpIHtcblx0XHRcdHRoaXMuaWQgPSBgSURfJHtuZXcgRGF0ZSgpLmdldFRpbWUoKX1gO1xuXHRcdH1cblx0fVxufVxuXG4vKipcbiAqIE5vdGlmaWN0aW9uIG9wdGlvbnNcbiAqXG4gKiBUaGlzIGludGVyZmFjZSBkZXNjcmliZXMgd2hpY2ggaW5mb3JtYXRpb24gYXJlIG5lZWRlZCB0byBjcmVhdGUgYSBuZXcgbm90aWZpY2F0aW9uLCBvciBpbiBvdGhlciB3b3Jkcywgd2hpY2ggaW5mb3JtYXRpb24gdGhlIGV4dGVybmFsIEFQSVxuICogY2FsbCBtdXN0IHByb3ZpZGUuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgTm90aWZpZXJOb3RpZmljYXRpb25PcHRpb25zIHtcblx0LyoqXG5cdCAqIE5vdGlmaWNhdGlvbiBJRCwgb3B0aW9uYWxcblx0ICovXG5cdGlkPzogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBOb3RpZmljYXRpb24gdHlwZVxuXHQgKi9cblx0dHlwZTogc3RyaW5nO1xuXG5cdC8qKlxuXHQgKiBOb3RpZmljYXRpbiBtZXNzYWdlXG5cdCAqL1xuXHRtZXNzYWdlOiBzdHJpbmc7XG5cblx0LyoqXG5cdCAqIFRoZSB0ZW1wbGF0ZSB0byBjdXN0b21pemVcblx0ICogdGhlIGFwcGVhcmFuY2Ugb2YgdGhlIG5vdGlmaWNhdGlvblxuXHQgKi9cblx0dGVtcGxhdGU/OiBUZW1wbGF0ZVJlZjxhbnk+O1xufVxuIl19