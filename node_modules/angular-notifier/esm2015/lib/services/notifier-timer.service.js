/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
/**
 * Notifier timer service
 *
 * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a
 * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.
 */
export class NotifierTimerService {
    /**
     * Constructor
     */
    constructor() {
        this.now = 0;
        this.remaining = 0;
    }
    /**
     * Start (or resume) the timer
     *
     * @param {?} duration Timer duration, in ms
     * @return {?} Promise, resolved once the timer finishes
     */
    start(duration) {
        return new Promise((/**
         * @param {?} resolve
         * @param {?} reject
         * @return {?}
         */
        (resolve, reject) => {
            // For the first run ...
            this.remaining = duration;
            // Setup, then start the timer
            this.finishPromiseResolver = resolve;
            this.continue();
        }));
    }
    /**
     * Pause the timer
     * @return {?}
     */
    pause() {
        clearTimeout(this.timerId);
        this.remaining -= new Date().getTime() - this.now;
    }
    /**
     * Continue the timer
     * @return {?}
     */
    continue() {
        this.now = new Date().getTime();
        this.timerId = window.setTimeout((/**
         * @return {?}
         */
        () => {
            this.finish();
        }), this.remaining);
    }
    /**
     * Stop the timer
     * @return {?}
     */
    stop() {
        clearTimeout(this.timerId);
        this.remaining = 0;
    }
    /**
     * Finish up the timeout by resolving the timer promise
     * @private
     * @return {?}
     */
    finish() {
        this.finishPromiseResolver();
    }
}
NotifierTimerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
NotifierTimerService.ctorParameters = () => [];
if (false) {
    /**
     * Timestamp (in ms), created in the moment the timer starts
     * @type {?}
     * @private
     */
    NotifierTimerService.prototype.now;
    /**
     * Remaining time (in ms)
     * @type {?}
     * @private
     */
    NotifierTimerService.prototype.remaining;
    /**
     * Timeout ID, used for clearing the timeout later on
     * @type {?}
     * @private
     */
    NotifierTimerService.prototype.timerId;
    /**
     * Promise resolve function, eventually getting called once the timer finishes
     * @type {?}
     * @private
     */
    NotifierTimerService.prototype.finishPromiseResolver;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibm90aWZpZXItdGltZXIuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL2FuZ3VsYXItbm90aWZpZXIvIiwic291cmNlcyI6WyJsaWIvc2VydmljZXMvbm90aWZpZXItdGltZXIuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7Ozs7OztBQVMzQyxNQUFNLE9BQU8sb0JBQW9COzs7O0lBeUJoQztRQUNDLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsSUFBSSxDQUFDLFNBQVMsR0FBRyxDQUFDLENBQUM7SUFDcEIsQ0FBQzs7Ozs7OztJQVFNLEtBQUssQ0FBRSxRQUFnQjtRQUM3QixPQUFPLElBQUksT0FBTzs7Ozs7UUFBYSxDQUFFLE9BQW1CLEVBQUUsTUFBa0IsRUFBRyxFQUFFO1lBRTVFLHdCQUF3QjtZQUN4QixJQUFJLENBQUMsU0FBUyxHQUFHLFFBQVEsQ0FBQztZQUUxQiw4QkFBOEI7WUFDOUIsSUFBSSxDQUFDLHFCQUFxQixHQUFHLE9BQU8sQ0FBQztZQUNyQyxJQUFJLENBQUMsUUFBUSxFQUFFLENBQUM7UUFFakIsQ0FBQyxFQUFFLENBQUM7SUFDTCxDQUFDOzs7OztJQUtNLEtBQUs7UUFDWCxZQUFZLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxTQUFTLElBQUksSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO0lBQ25ELENBQUM7Ozs7O0lBS00sUUFBUTtRQUNkLElBQUksQ0FBQyxHQUFHLEdBQUcsSUFBSSxJQUFJLEVBQUUsQ0FBQyxPQUFPLEVBQUUsQ0FBQztRQUNoQyxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQyxVQUFVOzs7UUFBRSxHQUFHLEVBQUU7WUFDdEMsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDO1FBQ2YsQ0FBQyxHQUFFLElBQUksQ0FBQyxTQUFTLENBQUUsQ0FBQztJQUNyQixDQUFDOzs7OztJQUtNLElBQUk7UUFDVixZQUFZLENBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBRSxDQUFDO1FBQzdCLElBQUksQ0FBQyxTQUFTLEdBQUcsQ0FBQyxDQUFDO0lBQ3BCLENBQUM7Ozs7OztJQUtPLE1BQU07UUFDYixJQUFJLENBQUMscUJBQXFCLEVBQUUsQ0FBQztJQUM5QixDQUFDOzs7WUFqRkQsVUFBVTs7Ozs7Ozs7OztJQU1WLG1DQUFvQjs7Ozs7O0lBS3BCLHlDQUEwQjs7Ozs7O0lBSzFCLHVDQUF3Qjs7Ozs7O0lBS3hCLHFEQUEwQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyoqXG4gKiBOb3RpZmllciB0aW1lciBzZXJ2aWNlXG4gKlxuICogVGhpcyBzZXJ2aWNlIGFjdHMgYXMgYSB0aW1lciwgbmVlZGVkIGR1ZSB0byB0aGUgc3RpbGwgcmF0aGVyIGxpbWl0ZWQgc2V0VGltZW91dCBKYXZhU2NyaXB0IEFQSS4gVGhlIHRpbWVyIHNlcnZpY2UgY2FuIHN0YXJ0IGFuZCBzdG9wIGFcbiAqIHRpbWVyLiBGdXJ0aGVybW9yZSwgaXQgY2FuIGFsc28gcGF1c2UgdGhlIHRpbWVyIGF0IGFueSB0aW1lLCBhbmQgcmVzdW1lIGxhdGVyIG9uLiBUaGUgdGltZXIgQVBJIHdvcmtkIHByb21pc2UtYmFzZWQuXG4gKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBOb3RpZmllclRpbWVyU2VydmljZSB7XG5cblx0LyoqXG5cdCAqIFRpbWVzdGFtcCAoaW4gbXMpLCBjcmVhdGVkIGluIHRoZSBtb21lbnQgdGhlIHRpbWVyIHN0YXJ0c1xuXHQgKi9cblx0cHJpdmF0ZSBub3c6IG51bWJlcjtcblxuXHQvKipcblx0ICogUmVtYWluaW5nIHRpbWUgKGluIG1zKVxuXHQgKi9cblx0cHJpdmF0ZSByZW1haW5pbmc6IG51bWJlcjtcblxuXHQvKipcblx0ICogVGltZW91dCBJRCwgdXNlZCBmb3IgY2xlYXJpbmcgdGhlIHRpbWVvdXQgbGF0ZXIgb25cblx0ICovXG5cdHByaXZhdGUgdGltZXJJZDogbnVtYmVyO1xuXG5cdC8qKlxuXHQgKiBQcm9taXNlIHJlc29sdmUgZnVuY3Rpb24sIGV2ZW50dWFsbHkgZ2V0dGluZyBjYWxsZWQgb25jZSB0aGUgdGltZXIgZmluaXNoZXNcblx0ICovXG5cdHByaXZhdGUgZmluaXNoUHJvbWlzZVJlc29sdmVyOiAoKSA9PiB2b2lkO1xuXG5cdC8qKlxuXHQgKiBDb25zdHJ1Y3RvclxuXHQgKi9cblx0cHVibGljIGNvbnN0cnVjdG9yKCkge1xuXHRcdHRoaXMubm93ID0gMDtcblx0XHR0aGlzLnJlbWFpbmluZyA9IDA7XG5cdH1cblxuXHQvKipcblx0ICogU3RhcnQgKG9yIHJlc3VtZSkgdGhlIHRpbWVyXG5cdCAqXG5cdCAqIEBwYXJhbSAgIGR1cmF0aW9uIFRpbWVyIGR1cmF0aW9uLCBpbiBtc1xuXHQgKiBAcmV0dXJucyAgICAgICAgICBQcm9taXNlLCByZXNvbHZlZCBvbmNlIHRoZSB0aW1lciBmaW5pc2hlc1xuXHQgKi9cblx0cHVibGljIHN0YXJ0KCBkdXJhdGlvbjogbnVtYmVyICk6IFByb21pc2U8dW5kZWZpbmVkPiB7XG5cdFx0cmV0dXJuIG5ldyBQcm9taXNlPHVuZGVmaW5lZD4oICggcmVzb2x2ZTogKCkgPT4gdm9pZCwgcmVqZWN0OiAoKSA9PiB2b2lkICkgPT4ge1xuXG5cdFx0XHQvLyBGb3IgdGhlIGZpcnN0IHJ1biAuLi5cblx0XHRcdHRoaXMucmVtYWluaW5nID0gZHVyYXRpb247XG5cblx0XHRcdC8vIFNldHVwLCB0aGVuIHN0YXJ0IHRoZSB0aW1lclxuXHRcdFx0dGhpcy5maW5pc2hQcm9taXNlUmVzb2x2ZXIgPSByZXNvbHZlO1xuXHRcdFx0dGhpcy5jb250aW51ZSgpO1xuXG5cdFx0fSApO1xuXHR9XG5cblx0LyoqXG5cdCAqIFBhdXNlIHRoZSB0aW1lclxuXHQgKi9cblx0cHVibGljIHBhdXNlKCk6IHZvaWQge1xuXHRcdGNsZWFyVGltZW91dCggdGhpcy50aW1lcklkICk7XG5cdFx0dGhpcy5yZW1haW5pbmcgLT0gbmV3IERhdGUoKS5nZXRUaW1lKCkgLSB0aGlzLm5vdztcblx0fVxuXG5cdC8qKlxuXHQgKiBDb250aW51ZSB0aGUgdGltZXJcblx0ICovXG5cdHB1YmxpYyBjb250aW51ZSgpOiB2b2lkIHtcblx0XHR0aGlzLm5vdyA9IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xuXHRcdHRoaXMudGltZXJJZCA9IHdpbmRvdy5zZXRUaW1lb3V0KCAoKSA9PiB7XG5cdFx0XHR0aGlzLmZpbmlzaCgpO1xuXHRcdH0sIHRoaXMucmVtYWluaW5nICk7XG5cdH1cblxuXHQvKipcblx0ICogU3RvcCB0aGUgdGltZXJcblx0ICovXG5cdHB1YmxpYyBzdG9wKCk6IHZvaWQge1xuXHRcdGNsZWFyVGltZW91dCggdGhpcy50aW1lcklkICk7XG5cdFx0dGhpcy5yZW1haW5pbmcgPSAwO1xuXHR9XG5cblx0LyoqXG5cdCAqIEZpbmlzaCB1cCB0aGUgdGltZW91dCBieSByZXNvbHZpbmcgdGhlIHRpbWVyIHByb21pc2Vcblx0ICovXG5cdHByaXZhdGUgZmluaXNoKCk6IHZvaWQge1xuXHRcdHRoaXMuZmluaXNoUHJvbWlzZVJlc29sdmVyKCk7XG5cdH1cblxufVxuIl19