{"version":3,"sources":["ng://angular-notifier/lib/models/notifier-notification.model.ts","ng://angular-notifier/lib/services/notifier-queue.service.ts","ng://angular-notifier/lib/models/notifier-config.model.ts","ng://angular-notifier/lib/notifier.tokens.ts","ng://angular-notifier/lib/services/notifier.service.ts","ng://angular-notifier/lib/components/notifier-container.component.ts","ng://angular-notifier/lib/animation-presets/fade.animation-preset.ts","ng://angular-notifier/lib/animation-presets/slide.animation-preset.ts","ng://angular-notifier/lib/services/notifier-animation.service.ts","ng://angular-notifier/lib/services/notifier-timer.service.ts","ng://angular-notifier/lib/components/notifier-notification.component.ts","ng://angular-notifier/lib/notifier.module.ts"],"names":["options","this","template","Object","assign","undefined","id","Date","getTime","NotifierQueueService","actionStream","Subject","actionQueue","isActionInProgress","prototype","push","action","tryToRunNextAction","continue","length","next","shift","Injectable","customOptions","animations","enabled","hide","easing","offset","preset","speed","overlap","show","behaviour","autoHide","onClick","onMouseover","showDismissButton","stacking","position","horizontal","distance","vertical","gap","theme","NotifierOptionsToken","InjectionToken","NotifierConfigToken","NotifierService","notifierQueueService","config","queueService","getConfig","notificationOptions","payload","type","notificationId","hideNewest","hideOldest","hideAll","notify","message","NotifierConfig","decorators","Inject","args","NotifierContainerComponent","changeDetector","notifierService","_this","notifications","queueServiceSubscription","subscribe","handleAction","then","ngOnDestroy","unsubscribe","identifyNotification","index","notification","onNotificationDismiss","onNotificationReady","notificationComponent","currentNotification","component","continueHandleShowAction","handleShowAction","handleHideAction","handleHideOldestAction","handleHideNewestAction","handleHideAllAction","Promise","resolve","reject","tempPromiseResolver","addNotificationToList","NotifierNotification","numberOfNotifications","removeNotificationFromList","stepPromises_1","oldNotifications_1","slice","setTimeout","shiftNotifications","getHeight","oldNotifications_2","all","stepPromises","findNotificationById","notificationIndex","findNotificationIndexById","oldNotifications","i","animationOffset","removeAllNotificationsFromList","toMakePlace","notificationPromises","markForCheck","filter","item","find","findIndex","Component","changeDetection","ChangeDetectionStrategy","OnPush","host","class","selector","ChangeDetectorRef","fade","from","opacity","to","slide","getShift","transform","NotifierAnimationService","animationPresets","getAnimationData","direction","keyframes","duration","fill","NotifierTimerService","now","remaining","start","finishPromiseResolver","pause","clearTimeout","timerId","window","finish","stop","NotifierNotificationComponent","elementRef","renderer","notifierTimerService","notifierAnimationService","ready","EventEmitter","dismiss","timerService","animationService","element","nativeElement","elementShift","ngAfterViewInit","setup","elementHeight","offsetHeight","elementWidth","offsetWidth","emit","getWidth","animationData","animatedProperties","keys","setStyle","animate","onfinish","startAutoHideTimer","stopAutoHideTimer","shiftToMakePlace","newElementShift","horizontalPosition","onClickDismiss","onNotificationMouseover","pauseAutoHideTimer","onNotificationMouseout","continueAutoHideTimer","onNotificationClick","addClass","(click)","(mouseout)","(mouseover)","providers","ElementRef","Renderer2","Input","Output","notifierCustomConfigFactory","notifierDefaultConfigFactory","NotifierModule","withConfig","ngModule","provide","useValue","deps","useFactory","NgModule","declarations","exports","imports","CommonModule"],"mappings":"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","sourcesContent":["import { NotifierNotificationComponent } from '../components/notifier-notification.component';\nimport { TemplateRef } from '@angular/core';\n\n/**\n * Notification\n *\n * This class describes the structure of a notifiction, including all information it needs to live, and everyone else needs to work with it.\n */\nexport class NotifierNotification {\n\t/**\n\t * Unique notification ID, can be set manually to control the notification from outside later on\n\t */\n\tpublic id: string;\n\n\t/**\n\t * Notification type, will be used for constructing an appropriate class name\n\t */\n\tpublic type: string;\n\n\t/**\n\t * Notification message\n\t */\n\tpublic message: string;\n\n\t/**\n\t * The template to customize\n\t * the appearance of the notification\n\t */\n\tpublic template?: TemplateRef<any> = null;\n\n\t/**\n\t * Component reference of this notification, created and set during creation time\n\t */\n\tpublic component: NotifierNotificationComponent;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param options Notifier options\n\t */\n\tpublic constructor(options: NotifierNotificationOptions) {\n\t\tObject.assign(this, options);\n\n\t\t// If not set manually, we have to create a unique notification ID by ourselves. The ID generation relies on the current browser\n\t\t// datetime in ms, in praticular the moment this notification gets constructed. Concurrency, and thus two IDs being the exact same,\n\t\t// is not possible due to the action queue concept.\n\t\tif (options.id === undefined) {\n\t\t\tthis.id = `ID_${new Date().getTime()}`;\n\t\t}\n\t}\n}\n\n/**\n * Notifiction options\n *\n * This interface describes which information are needed to create a new notification, or in other words, which information the external API\n * call must provide.\n */\nexport interface NotifierNotificationOptions {\n\t/**\n\t * Notification ID, optional\n\t */\n\tid?: string;\n\n\t/**\n\t * Notification type\n\t */\n\ttype: string;\n\n\t/**\n\t * Notificatin message\n\t */\n\tmessage: string;\n\n\t/**\n\t * The template to customize\n\t * the appearance of the notification\n\t */\n\ttemplate?: TemplateRef<any>;\n}\n","import { Injectable } from '@angular/core';\n\nimport { Subject } from 'rxjs';\n\nimport { NotifierAction } from '../models/notifier-action.model';\n\n/**\n * Notifier queue service\n *\n * In general, API calls don't get processed right away. Instead, we have to queue them up in order to prevent simultanious API calls\n * interfering with each other. This, at least in theory, is possible at any time. In particular, animations - which potentially overlap -\n * can cause changes in JS classes as well as affect the DOM. Therefore, the queue service takes all actions, puts them in a queue, and\n * processes them at the right time (which is when the previous action has been processed successfully).\n *\n * Technical sidenote:\n * An action looks pretty similar to the ones within the Flux / Redux pattern.\n */\n@Injectable()\nexport class NotifierQueueService {\n\n\t/**\n\t * Stream of actions, subscribable from outside\n\t */\n\tpublic readonly actionStream: Subject<NotifierAction>;\n\n\t/**\n\t * Queue of actions\n\t */\n\tprivate actionQueue: Array<NotifierAction>;\n\n\t/**\n\t * Flag, true if some action is currently in progress\n\t */\n\tprivate isActionInProgress: boolean;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic constructor() {\n\t\tthis.actionStream = new Subject<NotifierAction>();\n\t\tthis.actionQueue = [];\n\t\tthis.isActionInProgress = false;\n\t}\n\n\t/**\n\t * Push a new action to the queue, and try to run it\n\t *\n\t * @param action Action object\n\t */\n\tpublic push( action: NotifierAction ): void {\n\t\tthis.actionQueue.push( action );\n\t\tthis.tryToRunNextAction();\n\t}\n\n\t/**\n\t * Continue with the next action (called when the current action is finished)\n\t */\n\tpublic continue(): void {\n\t\tthis.isActionInProgress = false;\n\t\tthis.tryToRunNextAction();\n\t}\n\n\t/**\n\t * Try to run the next action in the queue; we skip if there already is some action in progress, or if there is no action left\n\t */\n\tprivate tryToRunNextAction(): void {\n\t\tif ( this.isActionInProgress || this.actionQueue.length === 0 ) {\n\t\t\treturn; // Skip (the queue can now go drink a coffee as it has nothing to do anymore)\n\t\t}\n\t\tthis.isActionInProgress = true;\n\t\tthis.actionStream.next( this.actionQueue.shift() ); // Push next action to the stream, and remove the current action from the queue\n\t}\n\n}\n","/**\n * Notifier options\n */\nexport interface NotifierOptions {\n\tanimations?: {\n\t\tenabled?: boolean;\n\t\thide?: {\n\t\t\teasing?: string;\n\t\t\toffset?: number | false;\n\t\t\tpreset?: string;\n\t\t\tspeed?: number;\n\t\t};\n\t\toverlap?: number | false;\n\t\tshift?: {\n\t\t\teasing?: string;\n\t\t\tspeed?: number;\n\t\t};\n\t\tshow?: {\n\t\t\teasing?: string;\n\t\t\tpreset?: string;\n\t\t\tspeed?: number;\n\t\t};\n\t};\n\tbehaviour?: {\n\t\tautoHide?: number | false;\n\t\tonClick?: 'hide' | false;\n\t\tonMouseover?: 'pauseAutoHide' | 'resetAutoHide' | false;\n\t\tshowDismissButton?: boolean;\n\t\tstacking?: number | false;\n\t};\n\tposition?: {\n\t\thorizontal?: {\n\t\t\tdistance?: number;\n\t\t\tposition?: 'left' | 'middle' | 'right';\n\t\t};\n\t\tvertical?: {\n\t\t\tdistance?: number;\n\t\t\tgap?: number;\n\t\t\tposition?: 'top' | 'bottom';\n\t\t};\n\t};\n\ttheme?: string;\n}\n\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\nexport class NotifierConfig implements NotifierOptions {\n\n\t/**\n\t * Customize animations\n\t */\n\tpublic animations: {\n\t\tenabled: boolean;\n\t\thide: {\n\t\t\teasing: string;\n\t\t\toffset: number | false;\n\t\t\tpreset: string;\n\t\t\tspeed: number;\n\t\t};\n\t\toverlap: number | false;\n\t\tshift: {\n\t\t\teasing: string;\n\t\t\tspeed: number;\n\t\t};\n\t\tshow: {\n\t\t\teasing: string;\n\t\t\tpreset: string;\n\t\t\tspeed: number;\n\t\t};\n\t};\n\n\t/**\n\t * Customize behaviour\n\t */\n\tpublic behaviour: {\n\t\tautoHide: number | false;\n\t\tonClick: 'hide' | false;\n\t\tonMouseover: 'pauseAutoHide' | 'resetAutoHide' | false;\n\t\tshowDismissButton: boolean;\n\t\tstacking: number | false;\n\t};\n\n\t/**\n\t * Customize positioning\n\t */\n\tpublic position: {\n\t\thorizontal: {\n\t\t\tdistance: number;\n\t\t\tposition: 'left' | 'middle' | 'right';\n\t\t};\n\t\tvertical: {\n\t\t\tdistance: number;\n\t\t\tgap: number;\n\t\t\tposition: 'top' | 'bottom';\n\t\t};\n\t};\n\n\t/**\n\t * Customize theming\n\t */\n\tpublic theme: string;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param [customOptions={}] Custom notifier options, optional\n\t */\n\tpublic constructor( customOptions: NotifierOptions = {} ) {\n\n\t\t// Set default values\n\t\tthis.animations = {\n\t\t\tenabled: true,\n\t\t\thide: {\n\t\t\t\teasing: 'ease',\n\t\t\t\toffset: 50,\n\t\t\t\tpreset: 'fade',\n\t\t\t\tspeed: 300\n\t\t\t},\n\t\t\toverlap: 150,\n\t\t\tshift: {\n\t\t\t\teasing: 'ease',\n\t\t\t\tspeed: 300\n\t\t\t},\n\t\t\tshow: {\n\t\t\t\teasing: 'ease',\n\t\t\t\tpreset: 'slide',\n\t\t\t\tspeed: 300\n\t\t\t}\n\t\t};\n\t\tthis.behaviour = {\n\t\t\tautoHide: 7000,\n\t\t\tonClick: false,\n\t\t\tonMouseover: 'pauseAutoHide',\n\t\t\tshowDismissButton: true,\n\t\t\tstacking: 4\n\t\t};\n\t\tthis.position = {\n\t\t\thorizontal: {\n\t\t\t\tdistance: 12,\n\t\t\t\tposition: 'left'\n\t\t\t},\n\t\t\tvertical: {\n\t\t\t\tdistance: 12,\n\t\t\t\tgap: 10,\n\t\t\t\tposition: 'bottom'\n\t\t\t}\n\t\t};\n\t\tthis.theme = 'material';\n\n\t\t// The following merges the custom options into the notifier config, respecting the already set default values\n\t\t// This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n\t\t// Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n\t\tif ( customOptions.theme !== undefined ) {\n\t\t\tthis.theme = customOptions.theme;\n\t\t}\n\t\tif ( customOptions.animations !== undefined ) {\n\t\t\tif ( customOptions.animations.enabled !== undefined ) {\n\t\t\t\tthis.animations.enabled = customOptions.animations.enabled;\n\t\t\t}\n\t\t\tif ( customOptions.animations.overlap !== undefined ) {\n\t\t\t\tthis.animations.overlap = customOptions.animations.overlap;\n\t\t\t}\n\t\t\tif ( customOptions.animations.hide !== undefined ) {\n\t\t\t\tObject.assign( this.animations.hide, customOptions.animations.hide );\n\t\t\t}\n\t\t\tif ( customOptions.animations.shift !== undefined ) {\n\t\t\t\tObject.assign( this.animations.shift, customOptions.animations.shift );\n\t\t\t}\n\t\t\tif ( customOptions.animations.show !== undefined ) {\n\t\t\t\tObject.assign( this.animations.show, customOptions.animations.show );\n\t\t\t}\n\t\t}\n\t\tif ( customOptions.behaviour !== undefined ) {\n\t\t\tObject.assign( this.behaviour, customOptions.behaviour );\n\t\t}\n\t\tif ( customOptions.position !== undefined ) {\n\t\t\tif ( customOptions.position.horizontal !== undefined ) {\n\t\t\t\tObject.assign( this.position.horizontal, customOptions.position.horizontal );\n\t\t\t}\n\t\t\tif ( customOptions.position.vertical !== undefined ) {\n\t\t\t\tObject.assign( this.position.vertical, customOptions.position.vertical );\n\t\t\t}\n\t\t}\n\n\t}\n\n}\n","import { NotifierConfig, NotifierOptions } from './models/notifier-config.model';\nimport { InjectionToken } from '@angular/core';\n\n// tslint:disable variable-name\n\n/**\n * Injection Token for notifier options\n */\nexport const NotifierOptionsToken: InjectionToken<NotifierOptions>\n\t= new InjectionToken<NotifierOptions>( '[angular-notifier] Notifier Options' );\n\n/**\n * Injection Token for notifier configuration\n */\nexport const NotifierConfigToken: InjectionToken<NotifierConfig>\n\t= new InjectionToken<NotifierConfig>( '[anuglar-notifier] Notifier Config' );\n\n// tslint:enable variable-name\n\n","import { Inject, Injectable, forwardRef } from '@angular/core';\n\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotificationOptions } from '../models/notifier-notification.model';\nimport { NotifierQueueService } from './notifier-queue.service';\nimport { NotifierConfigToken } from '../notifier.tokens';\n\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\n@Injectable()\nexport class NotifierService {\n\n\t/**\n\t * Notifier queue service\n\t */\n\tprivate readonly queueService: NotifierQueueService;\n\n\t/**\n\t * Notifier configuration\n\t */\n\tprivate readonly config: NotifierConfig;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param notifierQueueService Notifier queue service\n\t * @param config               Notifier configuration, optionally injected as a dependency\n\t */\n\tpublic constructor(\n\t\tnotifierQueueService: NotifierQueueService,\n\t\t@Inject(NotifierConfigToken) config: NotifierConfig\n\t) {\n\t\tthis.queueService = notifierQueueService;\n\t\tthis.config = config;\n\t}\n\n\t/**\n\t * Get the notifier configuration\n\t *\n\t * @returns Notifier configuration\n\t */\n\tpublic getConfig(): NotifierConfig {\n\t\treturn this.config;\n\t}\n\n\t/**\n\t * API: Show a new notification\n\t *\n\t * @param notificationOptions Notification options\n\t */\n\tpublic show( notificationOptions: NotifierNotificationOptions ): void {\n\t\tthis.queueService.push( {\n\t\t\tpayload: notificationOptions,\n\t\t\ttype: 'SHOW'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Hide a specific notification, given its ID\n\t *\n\t * @param notificationId ID of the notification to hide\n\t */\n\tpublic hide( notificationId: string ): void {\n\t\tthis.queueService.push( {\n\t\t\tpayload: notificationId,\n\t\t\ttype: 'HIDE'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Hide the newest notification\n\t */\n\tpublic hideNewest(): void {\n\t\tthis.queueService.push( {\n\t\t\ttype: 'HIDE_NEWEST'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Hide the oldest notification\n\t */\n\tpublic hideOldest(): void {\n\t\tthis.queueService.push( {\n\t\t\ttype: 'HIDE_OLDEST'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Hide all notifications at once\n\t */\n\tpublic hideAll(): void {\n\t\tthis.queueService.push( {\n\t\t\ttype: 'HIDE_ALL'\n\t\t} );\n\t}\n\n\t/**\n\t * API: Shortcut for showing a new notification\n\t *\n\t * @param type             Type of the notification\n\t * @param message          Message of the notification\n\t * @param [notificationId] Unique ID for the notification (optional)\n\t */\n\tpublic notify( type: string, message: string, notificationId?: string ): void {\n\t\tlet notificationOptions: NotifierNotificationOptions = {\n\t\t\tmessage,\n\t\t\ttype\n\t\t};\n\t\tif ( notificationId !== undefined ) {\n\t\t\tnotificationOptions.id = notificationId;\n\t\t}\n\t\tthis.show( notificationOptions );\n\t}\n\n}\n","import { ChangeDetectionStrategy, ChangeDetectorRef, Component, OnDestroy } from '@angular/core';\n\nimport { Subscription } from 'rxjs';\n\nimport { NotifierAction } from '../models/notifier-action.model';\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\nimport { NotifierQueueService } from '../services/notifier-queue.service';\nimport { NotifierService } from '../services/notifier.service';\nimport { NotifierNotificationComponent } from './notifier-notification.component';\n\n/**\n * Notifier container component\n * ----------------------------\n * This component acts as a wrapper for all notification components; consequently, it is responsible for creating a new notification\n * component and removing an existing notification component. Being more precicely, it also handles side effects of those actions, such as\n * shifting or even completely removing other notifications as well. Overall, this components handles actions coming from the queue service\n * by subscribing to its action stream.\n *\n * Technical sidenote:\n * This component has to be used somewhere in an application to work; it will not inject and create itself automatically, primarily in order\n * to not break the Angular AoT compilation. Moreover, this component (and also the notification components) set their change detection\n * strategy onPush, which means that we handle change detection manually in order to get the best performance. (#perfmatters)\n */\n@Component( {\n\tchangeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\n\thost: {\n\t\tclass: 'notifier__container'\n\t},\n\tselector: 'notifier-container',\n\ttemplateUrl: './notifier-container.component.html'\n} )\nexport class NotifierContainerComponent implements OnDestroy {\n\n\t/**\n\t * List of currently somewhat active notifications\n\t */\n\tpublic notifications: Array<NotifierNotification>;\n\n\t/**\n\t * Change detector\n\t */\n\tprivate readonly changeDetector: ChangeDetectorRef;\n\n\t/**\n\t * Notifier queue service\n\t */\n\tprivate readonly queueService: NotifierQueueService;\n\n\t/**\n\t * Notifier configuration\n\t */\n\tprivate readonly config: NotifierConfig;\n\n\t/**\n\t * Queue service observable subscription (saved for cleanup)\n\t */\n\tprivate queueServiceSubscription: Subscription;\n\n\t/**\n\t * Promise resolve function reference, temporarily used while the notification child component gets created\n\t */\n\tprivate tempPromiseResolver: () => void;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param changeDetector       Change detector, used for manually triggering change detection runs\n\t * @param notifierQueueService Notifier queue service\n\t * @param notifierService      Notifier service\n\t */\n\tpublic constructor( changeDetector: ChangeDetectorRef, notifierQueueService: NotifierQueueService, notifierService: NotifierService ) {\n\t\tthis.changeDetector = changeDetector;\n\t\tthis.queueService = notifierQueueService;\n\t\tthis.config = notifierService.getConfig();\n\t\tthis.notifications = [];\n\n\t\t// Connects this component up to the action queue, then handle incoming actions\n\t\tthis.queueServiceSubscription = this.queueService.actionStream.subscribe( ( action: NotifierAction ) => {\n\t\t\tthis.handleAction( action ).then( () => {\n\t\t\t\tthis.queueService.continue();\n\t\t\t} );\n\t\t} );\n\n\t}\n\n\t/**\n\t * Component destroyment lifecycle hook, cleans up the observable subsciption\n\t */\n\tpublic ngOnDestroy(): void {\n\t\tif ( this.queueServiceSubscription ) {\n\t\t\tthis.queueServiceSubscription.unsubscribe();\n\t\t}\n\t}\n\n\t/**\n\t * Notification identifier, used as the ngFor trackby function\n\t *\n\t * @param   index        Index\n\t * @param   notification Notifier notification\n\t * @returns Notification ID as the unique identnfier\n\t */\n\tpublic identifyNotification( index: number, notification: NotifierNotification ): string {\n\t\treturn notification.id;\n\t}\n\n\t/**\n\t * Event handler, handles clicks on notification dismiss buttons\n\t *\n\t * @param notificationId ID of the notification to dismiss\n\t */\n\tpublic onNotificationDismiss( notificationId: string ): void {\n\t\tthis.queueService.push( {\n\t\t\tpayload: notificationId,\n\t\t\ttype: 'HIDE'\n\t\t} );\n\t}\n\n\t/**\n\t * Event handler, handles notification ready events\n\t *\n\t * @param notificationComponent Notification component reference\n\t */\n\tpublic onNotificationReady( notificationComponent: NotifierNotificationComponent ): void {\n\t\tlet currentNotification: NotifierNotification = this.notifications[ this.notifications.length - 1 ]; // Get the latest notification\n\t\tcurrentNotification.component = notificationComponent; // Save the new omponent reference\n\t\tthis.continueHandleShowAction( currentNotification ); // Continue with handling the show action\n\t}\n\n\t/**\n\t * Handle incoming actions by mapping action types to methods, and then running them\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n\tprivate handleAction( action: NotifierAction ): Promise<undefined> {\n\t\tswitch ( action.type ) { // TODO: Maybe a map (actionType -> class method) is a cleaner solution here?\n\t\t\tcase 'SHOW':\n\t\t\t\treturn this.handleShowAction( action );\n\t\t\tcase 'HIDE':\n\t\t\t\treturn this.handleHideAction( action );\n\t\t\tcase 'HIDE_OLDEST':\n\t\t\t\treturn this.handleHideOldestAction( action );\n\t\t\tcase 'HIDE_NEWEST':\n\t\t\t\treturn this.handleHideNewestAction( action );\n\t\t\tcase 'HIDE_ALL':\n\t\t\t\treturn this.handleHideAllAction( action );\n\t\t\tdefault:\n\t\t\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\t\tresolve(); // Ignore unknown action types\n\t\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Show a new notification\n\t *\n\t * We simply add the notification to the list, and then wait until its properly initialized / created / rendered.\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n\tprivate handleShowAction( action: NotifierAction ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\tthis.tempPromiseResolver = resolve; // Save the promise resolve function so that it can be called later on by another method\n\t\t\tthis.addNotificationToList( new NotifierNotification( action.payload ) );\n\t\t} );\n\t}\n\n\t/**\n\t * Continue to show a new notification (after the notification components is initialized / created / rendered).\n\t *\n\t * If this is the first (and thus only) notification, we can simply show it. Otherwhise, if stacking is disabled (or a low value), we\n\t * switch out notifications, in particular we hide the existing one, and then show our new one. Yet, if stacking is enabled, we first\n\t * shift all older notifications, and then show our new notification. In addition, if there are too many notification on the screen,\n\t * we hide the oldest one first. Furthermore, if configured, animation overlapping is applied.\n\t *\n\t * @param notification New notification to show\n\t */\n\tprivate continueHandleShowAction( notification: NotifierNotification ): void {\n\n\t\t// First (which means only one) notification in the list?\n\t\tconst numberOfNotifications: number = this.notifications.length;\n\t\tif ( numberOfNotifications === 1 ) {\n\t\t\tnotification.component.show().then( this.tempPromiseResolver ); // Done\n\t\t} else {\n\n\t\t\tconst implicitStackingLimit: number = 2;\n\n\t\t\t// Stacking enabled? (stacking value below 2 means stacking is disabled)\n\t\t\tif ( this.config.behaviour.stacking === false || this.config.behaviour.stacking < implicitStackingLimit ) {\n\t\t\t\tthis.notifications[ 0 ].component.hide().then( () => {\n\t\t\t\t\tthis.removeNotificationFromList( this.notifications[ 0 ] );\n\t\t\t\t\tnotification.component.show().then( this.tempPromiseResolver ); // Done\n\t\t\t\t} );\n\t\t\t} else {\n\n\t\t\t\tconst stepPromises: Array<Promise<undefined>> = [];\n\n\t\t\t\t// Are there now too many notifications?\n\t\t\t\tif ( numberOfNotifications > this.config.behaviour.stacking ) {\n\n\t\t\t\t\tconst oldNotifications: Array<NotifierNotification> = this.notifications.slice( 1, numberOfNotifications - 1 );\n\n\t\t\t\t\t// Are animations enabled?\n\t\t\t\t\tif ( this.config.animations.enabled ) {\n\n\t\t\t\t\t\t// Is animation overlap enabled?\n\t\t\t\t\t\tif ( this.config.animations.overlap !== false && this.config.animations.overlap > 0 ) {\n\t\t\t\t\t\t\tstepPromises.push( this.notifications[ 0 ].component.hide() );\n\t\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), true ) );\n\t\t\t\t\t\t\t}, this.config.animations.hide.speed - this.config.animations.overlap );\n\t\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\t\tstepPromises.push( notification.component.show() );\n\t\t\t\t\t\t\t}, this.config.animations.hide.speed + this.config.animations.shift.speed - this.config.animations.overlap );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstepPromises.push( new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\t\t\t\t\tthis.notifications[ 0 ].component.hide().then( () => {\n\t\t\t\t\t\t\t\t\tthis.shiftNotifications( oldNotifications, notification.component.getHeight(), true ).then( () => {\n\t\t\t\t\t\t\t\t\t\tnotification.component.show().then( resolve );\n\t\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstepPromises.push( this.notifications[ 0 ].component.hide() );\n\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), true ) );\n\t\t\t\t\t\tstepPromises.push( notification.component.show() );\n\t\t\t\t\t}\n\n\t\t\t\t} else {\n\n\t\t\t\t\tconst oldNotifications: Array<NotifierNotification> = this.notifications.slice( 0, numberOfNotifications - 1 );\n\n\t\t\t\t\t// Are animations enabled?\n\t\t\t\t\tif ( this.config.animations.enabled ) {\n\n\t\t\t\t\t\t// Is animation overlap enabled?\n\t\t\t\t\t\tif ( this.config.animations.overlap !== false && this.config.animations.overlap > 0 ) {\n\t\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), true ) );\n\t\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\t\tstepPromises.push( notification.component.show() );\n\t\t\t\t\t\t\t}, this.config.animations.shift.speed - this.config.animations.overlap );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tstepPromises.push( new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\t\t\t\t\tthis.shiftNotifications( oldNotifications, notification.component.getHeight(), true ).then( () => {\n\t\t\t\t\t\t\t\t\tnotification.component.show().then( resolve );\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t} ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), true ) );\n\t\t\t\t\t\tstepPromises.push( notification.component.show() );\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t\tPromise.all( stepPromises ).then( () => {\n\t\t\t\t\tif ( numberOfNotifications > this.config.behaviour.stacking ) {\n\t\t\t\t\t\tthis.removeNotificationFromList( this.notifications[ 0 ] );\n\t\t\t\t\t}\n\t\t\t\t\tthis.tempPromiseResolver();\n\t\t\t\t} ); // Done\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n\t/**\n\t * Hide an existing notification\n\t *\n\t * Fist, we skip everything if there are no notifications at all, or the given notification does not exist. Then, we hide the given\n\t * notification. If there exist older notifications, we then shift them around to fill the gap. Once both hiding the given notification\n\t * and shifting the older notificaitons is done, the given notification gets finally removed (from the DOM).\n\t *\n\t * @param   action Action object, payload contains the notification ID\n\t * @returns Promise, resolved when done\n\t */\n\tprivate handleHideAction( action: NotifierAction ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\tconst stepPromises: Array<Promise<undefined>> = [];\n\n\t\t\t// Does the notification exist / are there even any notifications? (let's prevent accidential errors)\n\t\t\tconst notification: NotifierNotification | undefined = this.findNotificationById( action.payload );\n\t\t\tif ( notification === undefined ) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Get older notifications\n\t\t\tconst notificationIndex: number | undefined = this.findNotificationIndexById( action.payload );\n\t\t\tif ( notificationIndex === undefined ) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tconst oldNotifications: Array<NotifierNotification> = this.notifications.slice( 0, notificationIndex );\n\n\t\t\t// Do older notifications exist, and thus do we need to shift other notifications as a consequence?\n\t\t\tif ( oldNotifications.length > 0 ) {\n\n\t\t\t\t// Are animations enabled?\n\t\t\t\tif ( this.config.animations.enabled && this.config.animations.hide.speed > 0 ) {\n\n\t\t\t\t\t// Is animation overlap enabled?\n\t\t\t\t\tif ( this.config.animations.overlap !== false && this.config.animations.overlap > 0 ) {\n\t\t\t\t\t\tstepPromises.push( notification.component.hide() );\n\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), false ) );\n\t\t\t\t\t\t}, this.config.animations.hide.speed - this.config.animations.overlap );\n\t\t\t\t\t} else {\n\t\t\t\t\t\tnotification.component.hide().then( () => {\n\t\t\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), false ) );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tstepPromises.push( notification.component.hide() );\n\t\t\t\t\tstepPromises.push( this.shiftNotifications( oldNotifications, notification.component.getHeight(), false ) );\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tstepPromises.push( notification.component.hide() );\n\n\t\t\t}\n\n\t\t\t// Wait until both hiding and shifting is done, then remove the notification from the list\n\t\t\tPromise.all( stepPromises ).then( () => {\n\t\t\t\tthis.removeNotificationFromList( notification );\n\t\t\t\tresolve(); // Done\n\t\t\t} );\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Hide the oldest notification (bridge to handleHideAction)\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n\tprivate handleHideOldestAction( action: NotifierAction ): Promise<undefined> {\n\n\t\t// Are there any notifications? (prevent accidential errors)\n\t\tif ( this.notifications.length === 0 ) {\n\t\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\tresolve();\n\t\t\t} ); // Done\n\t\t} else {\n\t\t\taction.payload = this.notifications[ 0 ].id;\n\t\t\treturn this.handleHideAction( action );\n\t\t}\n\n\t}\n\n\t/**\n\t * Hide the newest notification (bridge to handleHideAction)\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n\tprivate handleHideNewestAction( action: NotifierAction ): Promise<undefined> {\n\n\t\t// Are there any notifications? (prevent accidential errors)\n\t\tif ( this.notifications.length === 0 ) {\n\t\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\t\t\t\tresolve();\n\t\t\t} ); // Done\n\t\t} else {\n\t\t\taction.payload = this.notifications[ this.notifications.length - 1 ].id;\n\t\t\treturn this.handleHideAction( action );\n\t\t}\n\n\t}\n\n\t/**\n\t * Hide all notifications at once\n\t *\n\t * @param   action Action object\n\t * @returns Promise, resolved when done\n\t */\n\tprivate handleHideAllAction( action: NotifierAction ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// Are there any notifications? (prevent accidential errors)\n\t\t\tconst numberOfNotifications: number = this.notifications.length;\n\t\t\tif ( numberOfNotifications === 0 ) {\n\t\t\t\tresolve(); // Done\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Are animations enabled?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.hide.speed > 0 && this.config.animations.hide.offset !== false &&\n\t\t\t\tthis.config.animations.hide.offset > 0 ) {\n\n\t\t\t\tfor ( let i: number = numberOfNotifications - 1; i >= 0; i-- ) {\n\t\t\t\t\tconst animationOffset: number = this.config.position.vertical.position === 'top' ? numberOfNotifications - 1 : i;\n\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\tthis.notifications[ i ].component.hide().then( () => {\n\n\t\t\t\t\t\t\t// Are we done here, was this the last notification to be hidden?\n\t\t\t\t\t\t\tif ( ( this.config.position.vertical.position === 'top' && i === 0 ) ||\n\t\t\t\t\t\t\t\t( this.config.position.vertical.position === 'bottom' && i === numberOfNotifications - 1 ) ) {\n\t\t\t\t\t\t\t\tthis.removeAllNotificationsFromList();\n\t\t\t\t\t\t\t\tresolve(); // Done\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} );\n\t\t\t\t\t}, this.config.animations.hide.offset * animationOffset );\n\t\t\t\t}\n\n\t\t\t} else {\n\n\t\t\t\tlet stepPromises: Array<Promise<undefined>> = [];\n\t\t\t\tfor ( let i: number = numberOfNotifications - 1; i >= 0; i-- ) {\n\t\t\t\t\tstepPromises.push( this.notifications[ i ].component.hide() );\n\t\t\t\t}\n\t\t\t\tPromise.all( stepPromises ).then( () => {\n\t\t\t\t\tthis.removeAllNotificationsFromList();\n\t\t\t\t\tresolve(); // Done\n\t\t\t\t} );\n\n\t\t\t}\n\n\t\t} );\n\t}\n\n\t/**\n\t * Shift multiple notifications at once\n\t *\n\t * @param   notifications List containing the notifications to be shifted\n\t * @param   distance      Distance to shift (in px)\n\t * @param   toMakePlace   Flag, defining in which direciton to shift\n\t * @returns Promise, resolved when done\n\t */\n\tprivate shiftNotifications( notifications: Array<NotifierNotification>, distance: number, toMakePlace: boolean ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// Are there any notifications to shift?\n\t\t\tif ( notifications.length === 0 ) {\n\t\t\t\tresolve();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet notificationPromises: Array<Promise<undefined>> = [];\n\t\t\tfor ( let i: number = notifications.length - 1; i >= 0; i-- ) {\n\t\t\t\tnotificationPromises.push( notifications[ i ].component.shift( distance, toMakePlace ) );\n\t\t\t}\n\t\t\tPromise.all( notificationPromises ).then( resolve ); // Done\n\n\t\t} );\n\t}\n\n\t/**\n\t * Add a new notification to the list of notifications (triggers change detection)\n\t *\n\t * @param notification Notification to add to the list of notifications\n\t */\n\tprivate addNotificationToList( notification: NotifierNotification ): void {\n\t\tthis.notifications.push( notification );\n\t\tthis.changeDetector.markForCheck(); // Run change detection because the notification list changed\n\t}\n\n\t/**\n\t * Remove an existing notification from the list of notifications (triggers change detection)\n\t *\n\t * @param notification Notification to be removed from the list of notifications\n\t */\n\tprivate removeNotificationFromList( notification: NotifierNotification ): void {\n\t\tthis.notifications =\n\t\t\tthis.notifications.filter( ( item: NotifierNotification ) => item.component !== notification.component );\n\t\tthis.changeDetector.markForCheck(); // Run change detection because the notification list changed\n\t}\n\n\t/**\n\t * Remove all notifications from the list (triggers change detection)\n\t */\n\tprivate removeAllNotificationsFromList(): void {\n\t\tthis.notifications = [];\n\t\tthis.changeDetector.markForCheck(); // Run change detection because the notification list changed\n\t}\n\n\t/**\n\t * Helper: Find a notification in the notification list by a given notification ID\n\t *\n\t * @param   notificationId Notification ID, used for finding notification\n\t * @returns Notification, undefined if not found\n\t */\n\tprivate findNotificationById( notificationId: string ): NotifierNotification | undefined {\n\t\treturn this.notifications.find( ( currentNotification: NotifierNotification ) => currentNotification.id === notificationId );\n\t}\n\n\t/**\n\t * Helper: Find a notification's index by a given notification ID\n\t *\n\t * @param   notificationId Notification ID, used for finding a notification's index\n\t * @returns Notification index, undefined if not found\n\t */\n\tprivate findNotificationIndexById( notificationId: string ): number | undefined {\n\t\tconst notificationIndex: number =\n\t\t\tthis.notifications.findIndex( ( currentNotification: NotifierNotification ) => currentNotification.id === notificationId );\n\t\treturn ( notificationIndex !== -1 ? notificationIndex : undefined );\n\t}\n\n}\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\n\n/**\n * Fade animation preset\n */\nexport const fade: NotifierAnimationPreset = {\n\thide: (): NotifierAnimationPresetKeyframes => {\n\t\treturn {\n\t\t\tfrom: {\n\t\t\t\topacity: '1'\n\t\t\t},\n\t\t\tto: {\n\t\t\t\topacity: '0'\n\t\t\t}\n\t\t};\n\t},\n\tshow: (): NotifierAnimationPresetKeyframes => {\n\t\treturn {\n\t\t\tfrom: {\n\t\t\t\topacity: '0'\n\t\t\t},\n\t\t\tto: {\n\t\t\t\topacity: '1'\n\t\t\t}\n\t\t};\n\t}\n};\n","import { NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\n\n/**\n * Slide animation preset\n */\nexport const slide: NotifierAnimationPreset = {\n\thide: ( notification: NotifierNotification ): NotifierAnimationPresetKeyframes => {\n\n\t\t// Prepare variables\n\t\tconst config: NotifierConfig = notification.component.getConfig();\n\t\tconst shift: number = notification.component.getShift();\n\t\tlet from: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\t\tlet to: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\n\t\t// Configure variables, depending on configuration and component\n\t\tif ( config.position.horizontal.position === 'left' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( 0, ${ shift }px, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: `translate3d( calc( -100% - ${ config.position.horizontal.distance }px - 10px ), ${ shift }px, 0 )`\n\t\t\t};\n\t\t} else if ( config.position.horizontal.position === 'right' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( 0, ${ shift }px, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: `translate3d( calc( 100% + ${ config.position.horizontal.distance }px + 10px ), ${ shift }px, 0 )`\n\t\t\t};\n\t\t} else {\n\t\t\tlet horizontalPosition: string;\n\t\t\tif ( config.position.vertical.position === 'top' ) {\n\t\t\t\thorizontalPosition = `calc( -100% - ${ config.position.horizontal.distance }px - 10px )`;\n\t\t\t} else {\n\t\t\t\thorizontalPosition = `calc( 100% + ${ config.position.horizontal.distance }px + 10px )`;\n\t\t\t}\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( -50%, ${ shift }px, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: `translate3d( -50%, ${ horizontalPosition }, 0 )`\n\t\t\t};\n\t\t}\n\n\t\t// Done\n\t\treturn {\n\t\t\tfrom,\n\t\t\tto\n\t\t};\n\n\t},\n\tshow: ( notification: NotifierNotification ): NotifierAnimationPresetKeyframes => {\n\n\t\t// Prepare variables\n\t\tconst config: NotifierConfig = notification.component.getConfig();\n\t\tlet from: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\t\tlet to: {\n\t\t\t[ animatablePropertyName: string ]: string;\n\t\t};\n\n\t\t// Configure variables, depending on configuration and component\n\t\tif ( config.position.horizontal.position === 'left' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( calc( -100% - ${ config.position.horizontal.distance }px - 10px ), 0, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: 'translate3d( 0, 0, 0 )'\n\t\t\t};\n\t\t} else if ( config.position.horizontal.position === 'right' ) {\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( calc( 100% + ${ config.position.horizontal.distance }px + 10px ), 0, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: 'translate3d( 0, 0, 0 )'\n\t\t\t};\n\t\t} else {\n\t\t\tlet horizontalPosition: string;\n\t\t\tif ( config.position.vertical.position === 'top' ) {\n\t\t\t\thorizontalPosition = `calc( -100% - ${ config.position.horizontal.distance }px - 10px )`;\n\t\t\t} else {\n\t\t\t\thorizontalPosition = `calc( 100% + ${ config.position.horizontal.distance }px + 10px )`;\n\t\t\t}\n\t\t\tfrom = {\n\t\t\t\ttransform: `translate3d( -50%, ${ horizontalPosition }, 0 )`\n\t\t\t};\n\t\t\tto = {\n\t\t\t\ttransform: 'translate3d( -50%, 0, 0 )'\n\t\t\t};\n\t\t}\n\n\t\t// Done\n\t\treturn {\n\t\t\tfrom,\n\t\t\tto\n\t\t};\n\n\t}\n};\n","import { Injectable } from '@angular/core';\n\nimport { NotifierAnimationData, NotifierAnimationPreset, NotifierAnimationPresetKeyframes } from '../models/notifier-animation.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\nimport { fade } from '../animation-presets/fade.animation-preset';\nimport { slide } from '../animation-presets/slide.animation-preset';\n\n/**\n * Notifier animation service\n */\n@Injectable()\nexport class NotifierAnimationService {\n\n\t/**\n\t * List of animation presets (currently static)\n\t */\n\tprivate readonly animationPresets: {\n\t\t[ animationPresetName: string ]: NotifierAnimationPreset\n\t};\n\n\t/**\n\t * Constructor\n\t */\n\tpublic constructor() {\n\t\tthis.animationPresets = {\n\t\t\tfade,\n\t\t\tslide\n\t\t};\n\t}\n\n\t/**\n\t * Get animation data\n\t *\n\t * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n\t * direction (either in or out) as well as the notifications (and its attributes) itself.\n\t *\n\t * @param   direction    Animation direction, either in or out\n\t * @param   notification Notification the animation data should be generated for\n\t * @returns Animation information\n\t */\n\tpublic getAnimationData( direction: 'show' | 'hide', notification: NotifierNotification ): NotifierAnimationData {\n\n\t\t// Get all necessary animation data\n\t\tlet keyframes: NotifierAnimationPresetKeyframes;\n\t\tlet duration: number;\n\t\tlet easing: string;\n\t\tif ( direction === 'show' ) {\n\t\t\tkeyframes = this.animationPresets[ notification.component.getConfig().animations.show.preset ].show( notification );\n\t\t\tduration = notification.component.getConfig().animations.show.speed;\n\t\t\teasing = notification.component.getConfig().animations.show.easing;\n\t\t} else {\n\t\t\tkeyframes = this.animationPresets[ notification.component.getConfig().animations.hide.preset ].hide( notification );\n\t\t\tduration = notification.component.getConfig().animations.hide.speed;\n\t\t\teasing = notification.component.getConfig().animations.hide.easing;\n\t\t}\n\n\t\t// Build and return animation data\n\t\treturn {\n\t\t\tkeyframes: [\n\t\t\t\tkeyframes.from,\n\t\t\t\tkeyframes.to\n\t\t\t],\n\t\t\toptions: {\n\t\t\t\tduration,\n\t\t\t\teasing,\n\t\t\t\tfill: 'forwards' // Keep the newly painted state after the animation finished\n\t\t\t}\n\t\t};\n\n\t}\n\n}\n","import { Injectable } from '@angular/core';\n\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\n@Injectable()\nexport class NotifierTimerService {\n\n\t/**\n\t * Timestamp (in ms), created in the moment the timer starts\n\t */\n\tprivate now: number;\n\n\t/**\n\t * Remaining time (in ms)\n\t */\n\tprivate remaining: number;\n\n\t/**\n\t * Timeout ID, used for clearing the timeout later on\n\t */\n\tprivate timerId: number;\n\n\t/**\n\t * Promise resolve function, eventually getting called once the timer finishes\n\t */\n\tprivate finishPromiseResolver: () => void;\n\n\t/**\n\t * Constructor\n\t */\n\tpublic constructor() {\n\t\tthis.now = 0;\n\t\tthis.remaining = 0;\n\t}\n\n\t/**\n\t * Start (or resume) the timer\n\t *\n\t * @param   duration Timer duration, in ms\n\t * @returns          Promise, resolved once the timer finishes\n\t */\n\tpublic start( duration: number ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// For the first run ...\n\t\t\tthis.remaining = duration;\n\n\t\t\t// Setup, then start the timer\n\t\t\tthis.finishPromiseResolver = resolve;\n\t\t\tthis.continue();\n\n\t\t} );\n\t}\n\n\t/**\n\t * Pause the timer\n\t */\n\tpublic pause(): void {\n\t\tclearTimeout( this.timerId );\n\t\tthis.remaining -= new Date().getTime() - this.now;\n\t}\n\n\t/**\n\t * Continue the timer\n\t */\n\tpublic continue(): void {\n\t\tthis.now = new Date().getTime();\n\t\tthis.timerId = window.setTimeout( () => {\n\t\t\tthis.finish();\n\t\t}, this.remaining );\n\t}\n\n\t/**\n\t * Stop the timer\n\t */\n\tpublic stop(): void {\n\t\tclearTimeout( this.timerId );\n\t\tthis.remaining = 0;\n\t}\n\n\t/**\n\t * Finish up the timeout by resolving the timer promise\n\t */\n\tprivate finish(): void {\n\t\tthis.finishPromiseResolver();\n\t}\n\n}\n","import { AfterViewInit, ChangeDetectionStrategy, Component, ElementRef, EventEmitter, Input, Output, Renderer2 } from '@angular/core';\n\nimport { NotifierAnimationData } from '../models/notifier-animation.model';\nimport { NotifierAnimationService } from '../services/notifier-animation.service';\nimport { NotifierConfig } from '../models/notifier-config.model';\nimport { NotifierNotification } from '../models/notifier-notification.model';\nimport { NotifierService } from '../services/notifier.service';\nimport { NotifierTimerService } from '../services/notifier-timer.service';\n\n/**\n * Notifier notification component\n * -------------------------------\n * This component is responsible for actually displaying the notification on screen. In addition, it's able to show and hide this\n * notification, in particular to animate this notification in and out, as well as shift (move) this notification vertically around.\n * Furthermore, the notification component handles all interactions the user has with this notification / component, such as clicks and\n * mouse movements.\n */\n@Component( {\n\tchangeDetection: ChangeDetectionStrategy.OnPush, // (#perfmatters)\n\thost: {\n\t\t'(click)': 'onNotificationClick()',\n\t\t'(mouseout)': 'onNotificationMouseout()',\n\t\t'(mouseover)': 'onNotificationMouseover()',\n\t\tclass: 'notifier__notification'\n\t},\n\tproviders: [\n\t\t// We provide the timer to the component's local injector, so that every notification components gets its own\n\t\t// instance of the timer service, thus running their timers independently from each other\n\t\tNotifierTimerService\n\t],\n\tselector: 'notifier-notification',\n\ttemplateUrl: './notifier-notification.component.html'\n} )\nexport class NotifierNotificationComponent implements AfterViewInit {\n\n\t/**\n\t * Input: Notification object, contains all details necessary to construct the notification\n\t */\n\t@Input()\n\tpublic notification: NotifierNotification;\n\n\t/**\n\t * Output: Ready event, handles the initialization success by emitting a reference to this notification component\n\t */\n\t@Output()\n\tpublic ready: EventEmitter<NotifierNotificationComponent>;\n\n\t/**\n\t * Output: Dismiss event, handles the click on the dismiss button by emitting the notification ID of this notification component\n\t */\n\t@Output()\n\tpublic dismiss: EventEmitter<string>;\n\n\t/**\n\t * Notifier configuration\n\t */\n\tpublic readonly config: NotifierConfig;\n\n\t/**\n\t * Notifier timer service\n\t */\n\tprivate readonly timerService: NotifierTimerService;\n\n\t/**\n\t * Notifier animation service\n\t */\n\tprivate readonly animationService: NotifierAnimationService;\n\n\t/**\n\t * Angular renderer, used to preserve the overall DOM abstraction & independence\n\t */\n\tprivate readonly renderer: Renderer2;\n\n\t/**\n\t * Native element reference, used for manipulating DOM properties\n\t */\n\tprivate readonly element: HTMLElement;\n\n\t/**\n\t * Current notification height, calculated and cached here (#perfmatters)\n\t */\n\tprivate elementHeight: number;\n\n\t/**\n\t * Current notification width, calculated and cached here (#perfmatters)\n\t */\n\tprivate elementWidth: number;\n\n\t/**\n\t * Current notification shift, calculated and cached here (#perfmatters)\n\t */\n\tprivate elementShift: number;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param elementRef               Reference to the component's element\n\t * @param renderer                 Angular renderer\n\t * @param notifierService          Notifier service\n\t * @param notifierTimerService     Notifier timer service\n\t * @param notifierAnimationService Notifier animation service\n\t */\n\tpublic constructor( elementRef: ElementRef, renderer: Renderer2, notifierService: NotifierService,\n\t\tnotifierTimerService: NotifierTimerService, notifierAnimationService: NotifierAnimationService ) {\n\t\tthis.config = notifierService.getConfig();\n\t\tthis.ready = new EventEmitter<NotifierNotificationComponent>();\n\t\tthis.dismiss = new EventEmitter<string>();\n\t\tthis.timerService = notifierTimerService;\n\t\tthis.animationService = notifierAnimationService;\n\t\tthis.renderer = renderer;\n\t\tthis.element = elementRef.nativeElement;\n\t\tthis.elementShift = 0;\n\t}\n\n\t/**\n\t * Component after view init lifecycle hook, setts up the component and then emits the ready event\n\t */\n\tpublic ngAfterViewInit(): void {\n\t\tthis.setup();\n\t\tthis.elementHeight = this.element.offsetHeight;\n\t\tthis.elementWidth = this.element.offsetWidth;\n\t\tthis.ready.emit( this );\n\t}\n\n\t/**\n\t * Get the notifier config\n\t *\n\t * @returns Notifier configuration\n\t */\n\tpublic getConfig(): NotifierConfig {\n\t\treturn this.config;\n\t}\n\n\t/**\n\t * Get notification element height (in px)\n\t *\n\t * @returns Notification element height (in px)\n\t */\n\tpublic getHeight(): number {\n\t\treturn this.elementHeight;\n\t}\n\n\t/**\n\t * Get notification element width (in px)\n\t *\n\t * @returns Notification element height (in px)\n\t */\n\tpublic getWidth(): number {\n\t\treturn this.elementWidth;\n\t}\n\n\t/**\n\t * Get notification shift offset (in px)\n\t *\n\t * @returns Notification element shift offset (in px)\n\t */\n\tpublic getShift(): number {\n\t\treturn this.elementShift;\n\t}\n\n\t/**\n\t * Show (animate in) this notification\n\t *\n\t * @returns Promise, resolved when done\n\t */\n\tpublic show(): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// Are animations enabled?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.show.speed > 0 ) {\n\n\t\t\t\t// Get animation data\n\t\t\t\tconst animationData: NotifierAnimationData = this.animationService.getAnimationData( 'show', this.notification );\n\n\t\t\t\t// Set initial styles (styles before animation), prevents quick flicker when animation starts\n\t\t\t\tconst animatedProperties: Array<string> = Object.keys( animationData.keyframes[ 0 ] );\n\t\t\t\tfor ( let i: number = animatedProperties.length - 1; i >= 0; i-- ) {\n\t\t\t\t\tthis.renderer.setStyle( this.element, animatedProperties[ i ],\n\t\t\t\t\t\tanimationData.keyframes[ 0 ][ animatedProperties[ i ] ] );\n\t\t\t\t}\n\n\t\t\t\t// Animate notification in\n\t\t\t\tthis.renderer.setStyle( this.element, 'visibility', 'visible' );\n\t\t\t\tconst animation: Animation = this.element.animate( animationData.keyframes, animationData.options );\n\t\t\t\tanimation.onfinish = () => {\n\t\t\t\t\tthis.startAutoHideTimer();\n\t\t\t\t\tresolve(); // Done\n\t\t\t\t};\n\n\t\t\t} else {\n\n\t\t\t\t// Show notification\n\t\t\t\tthis.renderer.setStyle( this.element, 'visibility', 'visible' );\n\t\t\t\tthis.startAutoHideTimer();\n\t\t\t\tresolve(); // Done\n\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Hide (animate out) this notification\n\t *\n\t * @returns Promise, resolved when done\n\t */\n\tpublic hide(): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\tthis.stopAutoHideTimer();\n\n\t\t\t// Are animations enabled?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.hide.speed > 0 ) {\n\t\t\t\tconst animationData: NotifierAnimationData = this.animationService.getAnimationData( 'hide', this.notification );\n\t\t\t\tconst animation: Animation = this.element.animate( animationData.keyframes, animationData.options );\n\t\t\t\tanimation.onfinish = () => {\n\t\t\t\t\tresolve(); // Done\n\t\t\t\t};\n\t\t\t} else {\n\t\t\t\tresolve(); // Done\n\t\t\t}\n\n\t\t} );\n\t}\n\n\t/**\n\t * Shift (move) this notification\n\t *\n\t * @param   distance         Distance to shift (in px)\n\t * @param   shiftToMakePlace Flag, defining in which direction to shift\n\t * @returns Promise, resolved when done\n\t */\n\tpublic shift( distance: number, shiftToMakePlace: boolean ): Promise<undefined> {\n\t\treturn new Promise<undefined>( ( resolve: () => void, reject: () => void ) => {\n\n\t\t\t// Calculate new position (position after the shift)\n\t\t\tlet newElementShift: number;\n\t\t\tif ( ( this.config.position.vertical.position === 'top' && shiftToMakePlace )\n\t\t\t\t|| ( this.config.position.vertical.position === 'bottom' && !shiftToMakePlace ) ) {\n\t\t\t\tnewElementShift = this.elementShift + distance + this.config.position.vertical.gap;\n\t\t\t} else {\n\t\t\t\tnewElementShift = this.elementShift - distance - this.config.position.vertical.gap;\n\t\t\t}\n\t\t\tconst horizontalPosition: string = this.config.position.horizontal.position === 'middle' ? '-50%' : '0';\n\n\t\t\t// Are animations enabled?\n\t\t\tif ( this.config.animations.enabled && this.config.animations.shift.speed > 0 ) {\n\t\t\t\tconst animationData: NotifierAnimationData = { // TODO: Extract into animation service\n\t\t\t\t\tkeyframes: [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttransform: `translate3d( ${ horizontalPosition }, ${ this.elementShift }px, 0 )`\n\t\t\t\t\t\t},\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\ttransform: `translate3d( ${ horizontalPosition }, ${ newElementShift }px, 0 )`\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tduration: this.config.animations.shift.speed,\n\t\t\t\t\t\teasing: this.config.animations.shift.easing,\n\t\t\t\t\t\tfill: 'forwards'\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\tthis.elementShift = newElementShift;\n\t\t\t\tconst animation: Animation = this.element.animate( animationData.keyframes, animationData.options );\n\t\t\t\tanimation.onfinish = () => {\n\t\t\t\t\tresolve(); // Done\n\t\t\t\t};\n\n\t\t\t} else {\n\t\t\t\tthis.renderer.setStyle( this.element, 'transform', `translate3d( ${ horizontalPosition }, ${ newElementShift }px, 0 )` );\n\t\t\t\tthis.elementShift = newElementShift;\n\t\t\t\tresolve(); // Done\n\t\t\t}\n\n\t\t} );\n\n\t}\n\n\t/**\n\t * Handle click on dismiss button\n\t */\n\tpublic onClickDismiss(): void {\n\t\tthis.dismiss.emit( this.notification.id );\n\t}\n\n\t/**\n\t * Handle mouseover over notification area\n\t */\n\tpublic onNotificationMouseover(): void {\n\t\tif ( this.config.behaviour.onMouseover === 'pauseAutoHide' ) {\n\t\t\tthis.pauseAutoHideTimer();\n\t\t} else if ( this.config.behaviour.onMouseover === 'resetAutoHide' ) {\n\t\t\tthis.stopAutoHideTimer();\n\t\t}\n\t}\n\n\t/**\n\t * Handle mouseout from notification area\n\t */\n\tpublic onNotificationMouseout(): void {\n\t\tif ( this.config.behaviour.onMouseover === 'pauseAutoHide' ) {\n\t\t\tthis.continueAutoHideTimer();\n\t\t} else if ( this.config.behaviour.onMouseover === 'resetAutoHide' ) {\n\t\t\tthis.startAutoHideTimer();\n\t\t}\n\t}\n\n\t/**\n\t * Handle click on notification area\n\t */\n\tpublic onNotificationClick(): void {\n\t\tif ( this.config.behaviour.onClick === 'hide' ) {\n\t\t\tthis.onClickDismiss();\n\t\t}\n\t}\n\n\t/**\n\t * Start the auto hide timer (if enabled)\n\t */\n\tprivate startAutoHideTimer(): void {\n\t\tif ( this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0 ) {\n\t\t\tthis.timerService.start( this.config.behaviour.autoHide ).then( () => {\n\t\t\t\tthis.onClickDismiss();\n\t\t\t} );\n\t\t}\n\t}\n\n\t/**\n\t * Pause the auto hide timer (if enabled)\n\t */\n\tprivate pauseAutoHideTimer(): void {\n\t\tif ( this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0 ) {\n\t\t\tthis.timerService.pause();\n\t\t}\n\t}\n\n\t/**\n\t * Continue the auto hide timer (if enabled)\n\t */\n\tprivate continueAutoHideTimer(): void {\n\t\tif ( this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0 ) {\n\t\t\tthis.timerService.continue();\n\t\t}\n\t}\n\n\t/**\n\t * Stop the auto hide timer (if enabled)\n\t */\n\tprivate stopAutoHideTimer(): void {\n\t\tif ( this.config.behaviour.autoHide !== false && this.config.behaviour.autoHide > 0 ) {\n\t\t\tthis.timerService.stop();\n\t\t}\n\t}\n\n\t/**\n\t * Initial notification setup\n\t */\n\tprivate setup(): void {\n\n\t\t// Set start position (initially the exact same for every new notification)\n\t\tif ( this.config.position.horizontal.position === 'left' ) {\n\t\t\tthis.renderer.setStyle( this.element, 'left', `${ this.config.position.horizontal.distance }px` );\n\t\t} else if ( this.config.position.horizontal.position === 'right' ) {\n\t\t\tthis.renderer.setStyle( this.element, 'right', `${ this.config.position.horizontal.distance }px` );\n\t\t} else {\n\t\t\tthis.renderer.setStyle( this.element, 'left', '50%' );\n\t\t\t// Let's get the GPU handle some work as well (#perfmatters)\n\t\t\tthis.renderer.setStyle( this.element, 'transform', 'translate3d( -50%, 0, 0 )' );\n\t\t}\n\t\tif ( this.config.position.vertical.position === 'top' ) {\n\t\t\tthis.renderer.setStyle( this.element, 'top', `${ this.config.position.vertical.distance }px` );\n\t\t} else {\n\t\t\tthis.renderer.setStyle( this.element, 'bottom', `${ this.config.position.vertical.distance }px` );\n\t\t}\n\n\t\t// Add classes (responsible for visual design)\n\t\tthis.renderer.addClass( this.element, `notifier__notification--${ this.notification.type }` );\n\t\tthis.renderer.addClass( this.element, `notifier__notification--${ this.config.theme }` );\n\n\t}\n\n}\n","import { CommonModule } from '@angular/common';\nimport { InjectionToken, ModuleWithProviders, NgModule } from '@angular/core';\n\nimport { NotifierContainerComponent } from './components/notifier-container.component';\nimport { NotifierNotificationComponent } from './components/notifier-notification.component';\nimport { NotifierConfig, NotifierOptions } from './models/notifier-config.model';\nimport { NotifierAnimationService } from './services/notifier-animation.service';\nimport { NotifierQueueService } from './services/notifier-queue.service';\nimport { NotifierService } from './services/notifier.service';\nimport { NotifierConfigToken, NotifierOptionsToken } from './notifier.tokens';\n\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param   options - Custom notifier options\n * @returns - Notifier configuration as result\n */\nexport function notifierCustomConfigFactory( options: NotifierOptions ): NotifierConfig {\n\treturn new NotifierConfig( options );\n}\n\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @returns - Notifier configuration as result\n */\nexport function notifierDefaultConfigFactory(): NotifierConfig {\n\treturn new NotifierConfig( {} );\n}\n\n/**\n * Notifier module\n */\n@NgModule( {\n\tdeclarations: [\n\t\tNotifierContainerComponent,\n\t\tNotifierNotificationComponent\n\t],\n\texports: [\n\t\tNotifierContainerComponent\n\t],\n\timports: [\n\t\tCommonModule\n\t],\n\tproviders: [\n\t\tNotifierAnimationService,\n\t\tNotifierService,\n\t\tNotifierQueueService,\n\n\t\t// Provide the default notifier configuration if just the module is imported\n\t\t{\n\t\t\tprovide: NotifierConfigToken,\n\t\t\tuseFactory: notifierDefaultConfigFactory\n\t\t}\n\n\t]\n} )\nexport class NotifierModule {\n\n\t/**\n\t * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n\t *\n\t * @param   [options={}] - Custom notifier options\n\t * @returns - Notifier module with custom providers\n\t */\n\tpublic static withConfig( options: NotifierOptions = {} ): ModuleWithProviders {\n\t\treturn {\n\t\t\tngModule: NotifierModule,\n\t\t\tproviders: [\n\n\t\t\t\t// Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n\t\t\t\t{\n\t\t\t\t\tprovide: NotifierOptionsToken,\n\t\t\t\t\tuseValue: options\n\t\t\t\t},\n\n\t\t\t\t// Provide a custom notifier configuration, based on the given notifier options\n\t\t\t\t{\n\t\t\t\t\tdeps: [\n\t\t\t\t\t\tNotifierOptionsToken\n\t\t\t\t\t],\n\t\t\t\t\tprovide: NotifierConfigToken,\n\t\t\t\t\tuseFactory: notifierCustomConfigFactory\n\t\t\t\t}\n\n\t\t\t]\n\t\t};\n\t}\n\n}\n"]}