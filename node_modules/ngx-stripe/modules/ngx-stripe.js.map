{"version":3,"file":"ngx-stripe.js","sources":["../../src/modules/ngx-stripe.module.ts","../../src/components/stripe-card.component.ts","../../src/services/stripe-factory.service.ts","../../src/services/stripe.service.ts","../../src/services/stripe-instance.class.ts","../../src/interfaces/token.ts","../../src/interfaces/sources.ts","../../src/interfaces/stripe.ts","../../src/services/api-loader.service.ts","../../src/services/document-ref.service.ts","../../src/services/window-ref.service.ts"],"sourcesContent":["import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LazyStripeAPILoader } from '../services/api-loader.service';\nimport { StripeService } from '../services/stripe.service';\nimport { StripeFactoryService } from '../services/stripe-factory.service';\n\nimport { WindowRef } from '../services/window-ref.service';\nimport { DocumentRef } from '../services/document-ref.service';\n\nimport {\n  Options,\n  STRIPE_PUBLISHABLE_KEY,\n  STRIPE_OPTIONS\n} from '../interfaces/stripe';\nimport { StripeCardComponent } from '../components/stripe-card.component';\n\n@NgModule({\n  declarations: [StripeCardComponent],\n  exports: [StripeCardComponent]\n})\nexport class NgxStripeModule {\n  public static forRoot(\n    publishableKey?: string,\n    options?: Options\n  ): ModuleWithProviders {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        StripeFactoryService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output\n} from '@angular/core';\n\nimport { BehaviorSubject, Observable, combineLatest } from 'rxjs';\nimport { switchMap, filter } from 'rxjs/operators';\n\nimport {\n  Element as StripeElement,\n  ElementOptions,\n  ElementEventType\n} from '../interfaces/element';\nimport { StripeService } from '../services/stripe.service';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport { StripeInstance } from '../services/stripe-instance.class';\n\n@Component({\n  selector: 'ngx-stripe-card',\n  template: `<div class=\"field\" #stripeCard></div>`\n})\nexport class StripeCardComponent implements OnInit {\n  @Output() public card = new EventEmitter<StripeElement>();\n  @Output()\n  public on = new EventEmitter<{ type: ElementEventType; event: any }>();\n\n  @ViewChild('stripeCard') private stripeCard!: ElementRef;\n  private element!: StripeElement;\n  @Input()\n  private set options(optionsIn: ElementOptions) {\n    this.options$.next(optionsIn);\n  }\n  private options$ = new BehaviorSubject<ElementOptions>({});\n  @Input()\n  private set elementsOptions(optionsIn: ElementsOptions) {\n    this.elementsOptions$.next(optionsIn);\n  }\n  private elementsOptions$ = new BehaviorSubject<ElementsOptions>({});\n  @Input()\n  private set stripe(stripeIn: StripeInstance) {\n    this.stripe$.next(stripeIn);\n  }\n  private stripe$ = new BehaviorSubject<StripeInstance | null>(null);\n\n  constructor(private stripeService: StripeService) {}\n\n  public ngOnInit() {\n    const elements$: Observable<Elements> = combineLatest(\n      this.elementsOptions$.asObservable(),\n      this.stripe$.asObservable()\n    ).pipe(\n      switchMap(([options, stripe]) => {\n        if (stripe) {\n          if (Object.keys(options).length > 0) {\n            return stripe.elements(options);\n          }\n          return stripe.elements();\n        } else {\n          if (Object.keys(options).length > 0) {\n            return this.stripeService.elements(options);\n          }\n          return this.stripeService.elements();\n        }\n      })\n    );\n    combineLatest(\n      elements$,\n      this.options$.asObservable().pipe(filter(options => Boolean(options)))\n    ).subscribe(([elements, options]) => {\n      this.element = elements.create('card', options);\n\n      this.element.on('blur', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'blur'\n        })\n      );\n\n      this.element.on('change', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'change'\n        })\n      );\n\n      this.element.on('click', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'click'\n        })\n      );\n\n      this.element.on('focus', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'focus'\n        })\n      );\n\n      this.element.on('ready', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'ready'\n        })\n      );\n\n      this.element.mount(this.stripeCard.nativeElement);\n\n      this.card.emit(this.element);\n    });\n  }\n\n  public getCard(): StripeElement {\n    return this.element;\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { LazyStripeAPILoader } from './api-loader.service';\nimport { WindowRef } from './window-ref.service';\nimport { StripeInstance } from './stripe-instance.class';\n\n@Injectable()\nexport class StripeFactoryService {\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    @Inject(STRIPE_PUBLISHABLE_KEY) private baseKey: string,\n    @Inject(STRIPE_OPTIONS) private baseOptions: string,\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef\n  ) {}\n\n  public create(key: string, options?: Options): StripeInstance {\n    return new StripeInstance(\n      this.platformId,\n      this.loader,\n      this.window,\n      key,\n      options\n    );\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { WindowRef } from './window-ref.service';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  StripeJS,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport {\n  SourceData,\n  SourceResult,\n  isSourceData,\n  SourceParams\n} from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData\n} from '../interfaces/token';\nimport { StripeInstance } from './stripe-instance.class';\nimport { StripeServiceInterface } from './stripe-instance.interface';\nimport { PaymentRequestOptions } from '../interfaces/payment-request';\n\n@Injectable()\nexport class StripeService implements StripeServiceInterface {\n  private stripe!: StripeInstance;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    @Inject(STRIPE_PUBLISHABLE_KEY) private key: string,\n    @Inject(STRIPE_OPTIONS) private options: Options,\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef\n  ) {\n    if (key) {\n      this.stripe = new StripeInstance(\n        this.platformId,\n        this.loader,\n        this.window,\n        key,\n        options\n      );\n    }\n  }\n\n  public getStripeReference(): Observable<any> {\n    return this.loader\n      .asStream()\n      .pipe(\n        filter((status: Status) => status.loaded === true),\n        map(() => (this.window.getNativeWindow() as any).Stripe)\n      );\n  }\n\n  public getInstance() {\n    return this.stripe.getInstance();\n  }\n\n  public setKey(key: string, options?: Options) {\n    return this.changeKey(key, options);\n  }\n\n  public changeKey(key: string, options?: Options) {\n    this.stripe = new StripeInstance(\n      this.platformId,\n      this.loader,\n      this.window,\n      key,\n      options\n    );\n\n    return this.stripe;\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripe.elements(options);\n  }\n\n  public createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    return this.stripe.createToken(a, b);\n  }\n\n  public createSource(\n    a: Element | SourceData,\n    b?: SourceData | undefined\n  ): Observable<SourceResult> {\n    return this.stripe.createSource(a, b);\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return this.stripe.retrieveSource(source);\n  }\n\n  public paymentRequest(options: PaymentRequestOptions) {\n    return this.stripe.paymentRequest(options);\n  }\n}\n","import { Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable, from, of, BehaviorSubject } from 'rxjs';\nimport { map, filter, switchMap, first } from 'rxjs/operators';\n\nimport { WindowRef } from './window-ref.service';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  StripeJS,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport {\n  SourceData,\n  SourceResult,\n  isSourceData,\n  SourceParams\n} from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData\n} from '../interfaces/token';\nimport { StripeServiceInterface } from './stripe-instance.interface';\nimport { PaymentRequestOptions } from '../interfaces/payment-request';\n\nexport class StripeInstance implements StripeServiceInterface {\n  private stripe$: BehaviorSubject<StripeJS | undefined> = new BehaviorSubject<\n    StripeJS | undefined\n  >(undefined);\n\n  constructor(\n    private platformId: any,\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef,\n    private key: string,\n    private options?: Options\n  ) {\n    this.loader\n      .asStream()\n      .pipe(\n        filter((status: Status) => status.loaded === true),\n        first(),\n        map(() => (this.window.getNativeWindow() as any).Stripe)\n      )\n      .subscribe(Stripe => {\n        const stripe = this.options\n          ? (Stripe(this.key, this.options) as StripeJS)\n          : (Stripe(this.key) as StripeJS);\n\n        this.stripe$.next(stripe);\n      });\n  }\n\n  public getInstance(): StripeJS | undefined {\n    return this.stripe$.getValue();\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripe$.pipe(\n      filter(stripe => Boolean(stripe)),\n      map(stripe => (stripe as StripeJS).elements(options))\n    );\n  }\n\n  public createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    return this.stripe$.pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        if (isBankAccount(a) && isBankAccountData(b)) {\n          return from(stripe.createToken(a, b));\n        } else if (isPii(a) && isPiiData(b)) {\n          return from(stripe.createToken(a, b));\n        } else {\n          return from(\n            stripe.createToken(a as Element, b as CardDataOptions | undefined)\n          );\n        }\n      })\n    );\n  }\n\n  public createSource(\n    a: Element | SourceData,\n    b?: SourceData | undefined\n  ): Observable<SourceResult> {\n    return this.stripe$.pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        if (isSourceData(a)) {\n          return from(stripe.createSource(a as SourceData));\n        }\n        return from(stripe.createSource(a as Element, b));\n      })\n    );\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return this.stripe$.pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        return from(stripe.retrieveSource(source));\n      })\n    );\n  }\n\n  public paymentRequest(options: PaymentRequestOptions) {\n    return this.stripe$.pipe(\n      filter(stripe => Boolean(stripe)),\n      map(s => {\n        const stripe = s as StripeJS;\n\n        return stripe.paymentRequest(options);\n      })\n    );\n  }\n}\n","import { Error } from './utils';\n\nexport interface Token {\n  id: string;\n  object: 'token';\n  bank_account?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'bank_account';\n    account_holder_name: string;\n    account_holder_type: 'individual' | 'company';\n    bank_name: string;\n    last4: string;\n    routing_number: string;\n    status:\n      | 'new'\n      | 'validated'\n      | 'verified'\n      | 'verification_failded'\n      | 'errored';\n  };\n  card?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'card';\n    address_city: string;\n    address_country: string;\n    address_line1: string;\n    address_line1_check: FieldCheck;\n    address_line2: string;\n    address_state: string;\n    address_zip: string;\n    address_zip_check: FieldCheck;\n    brand: string;\n    cvc_check: FieldCheck;\n    dynamic_last4: string;\n    exp_month: number;\n    exp_year: number;\n    funding: 'credit' | 'debit' | 'prepaid' | 'unknown';\n    last4: string;\n    metadata: { [key: string]: any };\n    name: string;\n    tokenization_method: 'apple_pay' | 'android_pay';\n  };\n  client_ip: string;\n  livemode: boolean;\n  type: 'card' | 'bank_account';\n  used: boolean;\n}\n\nexport type FieldCheck = 'pass' | 'fail' | 'unavailable' | 'unchecked';\n\nexport interface CardDataOptions {\n  name?: string;\n  address_line1?: string;\n  address_line2?: string;\n  address_city?: string;\n  address_state?: string;\n  address_zip?: string;\n  address_country?: string;\n  currency?: string;\n}\n\nexport interface TokenResult {\n  token?: Token;\n  error?: Error;\n}\n\nexport type BankAccount = 'bank_account';\n\nexport interface BankAccountData {\n  country: string;\n  currency: string;\n  routing_number: string;\n  account_number: string;\n  account_holder_name: string;\n  account_holder_type: 'individual' | 'company';\n}\n\nexport type Pii = 'pii';\n\nexport interface PiiData {\n  personal_id_number: string;\n}\n\nexport function isBankAccount(account: any): account is BankAccount {\n  return account === 'bank_account';\n}\n\nexport function isBankAccountData(\n  bankAccountData: any\n): bankAccountData is BankAccountData {\n  return (\n    'country' in bankAccountData &&\n    'currency' in bankAccountData &&\n    'routing_number' in bankAccountData &&\n    'account_number' in bankAccountData &&\n    'account_holder_name' in bankAccountData &&\n    'account_holder_type' in bankAccountData &&\n    (bankAccountData.account_holder_type === 'individual' ||\n      bankAccountData.account_holder_type === 'company')\n  );\n}\n\nexport function isPii(pii: any): pii is Pii {\n  return pii === 'pii';\n}\n\nexport function isPiiData(piiData: any): piiData is PiiData {\n  return 'personal_id_number' in piiData;\n}\n","import { Error, Address } from './utils';\n\nexport interface Source {\n  id: string;\n  object: 'source';\n  amount: number;\n  client_secret: string;\n  code_verification?: {\n    attempts_remaining: number;\n    status: 'pending' | 'succeded' | 'failed';\n  };\n  created: number;\n  currency: string;\n  flow: FlowTypes;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  owner: {\n    address: Address;\n    email: string;\n    name: string;\n    phone: string;\n    verified_address: Address;\n    verified_email: string;\n    verified_name: string;\n    verified_phone: string;\n  };\n  receiver: {\n    address: string;\n    amount_charged: number;\n    amount_received: number;\n    amount_returned: number;\n    redirect?: {\n      return_url: string;\n      status: 'pending' | 'succeeded' | 'failed';\n      url: string;\n    };\n  };\n  status: 'canceled' | 'chargeable' | 'consumed' | 'failed' | 'pending';\n  type:\n    | 'card'\n    | 'three_d_secure'\n    | 'giropay'\n    | 'sepa_bit'\n    | 'ideal'\n    | 'sofort'\n    | 'bancontact';\n  usage: UsageTypes;\n}\n\nexport type UsageTypes = 'reusable' | 'single_use';\nexport type FlowTypes = 'redirect' | 'receiver' | 'code_verification' | 'none';\n\nexport interface SourceParams {\n  id: string;\n  client_secret: string;\n}\n\nexport interface SourceData {\n  type?: string;\n  amount?: number;\n  currency?: string;\n  flow?: FlowTypes;\n  metadata?: { [key: string]: any };\n  owner?: {\n    address?: Address;\n    email?: string;\n    name?: string;\n    phone?: string;\n  };\n  redirect?: {\n    [key: string]: any;\n    return_url: string;\n  };\n  token?: string;\n  usage?: UsageTypes;\n}\n\nexport function isSourceData(sourceData: any): sourceData is SourceData {\n  return 'type' in sourceData;\n}\n\nexport interface SourceResult {\n  source?: Source;\n  error?: Error;\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { Elements, ElementsOptions } from './elements';\nimport { Element } from './element';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  Pii,\n  PiiData\n} from './token';\nimport { SourceData, SourceResult, SourceParams } from './sources';\nimport { PaymentRequestOptions } from './payment-request';\n\nexport const STRIPE_PUBLISHABLE_KEY = new InjectionToken<string>(\n  'Stripe Publishable Key'\n);\nexport const STRIPE_OPTIONS = new InjectionToken<Options>('Stripe Options');\n\nexport interface StripeJS {\n  elements(options?: ElementsOptions): Elements;\n  createToken(el: Element, cardData?: CardDataOptions): Promise<TokenResult>;\n  createToken(\n    account: BankAccount,\n    bankAccountData: BankAccountData\n  ): Promise<TokenResult>;\n  createToken(pii: Pii, piiData: PiiData): Promise<TokenResult>;\n  createSource(el: Element, sourceData?: SourceData): Promise<SourceResult>;\n  createSource(sourceData: SourceData): Promise<SourceResult>;\n  retrieveSource(source: SourceParams): Promise<SourceResult>;\n  paymentRequest(options: PaymentRequestOptions): any;\n}\n\nexport interface Options {\n  stripeAccount?: string;\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\n\nimport { WindowRef } from './window-ref.service';\nimport { DocumentRef } from './document-ref.service';\n\nexport interface Status {\n  loaded: boolean;\n  loading: boolean;\n  error: boolean;\n}\n\n@Injectable()\nexport class LazyStripeAPILoader {\n  private status: BehaviorSubject<Status> = new BehaviorSubject<Status>({\n    error: false,\n    loaded: false,\n    loading: false\n  });\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private window: WindowRef,\n    private document: DocumentRef\n  ) {}\n\n  public asStream(): Observable<Status> {\n    this.load();\n    return this.status.asObservable();\n  }\n\n  public isReady(): boolean {\n    return this.status.getValue().loaded;\n  }\n\n  public load() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n    const status: Status = this.status.getValue();\n    if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n      this.status.next({\n        error: false,\n        loaded: true,\n        loading: false\n      });\n    } else if (!status.loaded && !status.loading) {\n      this.status.next({\n        ...status,\n        loading: true\n      });\n\n      const script = this.document.getNativeDocument().createElement('script');\n      script.type = 'text/javascript';\n      script.async = true;\n      script.defer = true;\n      script.src = 'https://js.stripe.com/v3/';\n\n      script.onload = () => {\n        this.status.next({\n          error: false,\n          loaded: true,\n          loading: false\n        });\n      };\n\n      script.onerror = () => {\n        this.status.next({\n          error: true,\n          loaded: false,\n          loading: false\n        });\n      };\n\n      this.document.getNativeDocument().body.appendChild(script);\n    }\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class DocumentRef {\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  public getNativeDocument(): Document {\n    if (isPlatformBrowser(this.platformId)) {\n      return document;\n    }\n    return {} as Document;\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class WindowRef {\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  public getNativeWindow(): Window {\n    if (isPlatformBrowser(this.platformId)) {\n      return window;\n    }\n    return {} as Window;\n  }\n}\n"],"names":[],"mappings":"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"}