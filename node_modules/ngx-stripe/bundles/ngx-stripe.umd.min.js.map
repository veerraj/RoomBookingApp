{"version":3,"file":"ngx-stripe.umd.min.js","sources":["../../src/interfaces/sources.ts","../../src/interfaces/token.ts","../../src/services/window-ref.service.ts","../../src/services/document-ref.service.ts","../../src/services/api-loader.service.ts","../../src/interfaces/stripe.ts","../../src/services/stripe-instance.class.ts","../../src/services/stripe.service.ts","../../src/services/stripe-factory.service.ts","../../src/components/stripe-card.component.ts","../../src/modules/ngx-stripe.module.ts"],"sourcesContent":["import { Error, Address } from './utils';\n\nexport interface Source {\n  id: string;\n  object: 'source';\n  amount: number;\n  client_secret: string;\n  code_verification?: {\n    attempts_remaining: number;\n    status: 'pending' | 'succeded' | 'failed';\n  };\n  created: number;\n  currency: string;\n  flow: FlowTypes;\n  livemode: boolean;\n  metadata: { [key: string]: any };\n  owner: {\n    address: Address;\n    email: string;\n    name: string;\n    phone: string;\n    verified_address: Address;\n    verified_email: string;\n    verified_name: string;\n    verified_phone: string;\n  };\n  receiver: {\n    address: string;\n    amount_charged: number;\n    amount_received: number;\n    amount_returned: number;\n    redirect?: {\n      return_url: string;\n      status: 'pending' | 'succeeded' | 'failed';\n      url: string;\n    };\n  };\n  status: 'canceled' | 'chargeable' | 'consumed' | 'failed' | 'pending';\n  type:\n    | 'card'\n    | 'three_d_secure'\n    | 'giropay'\n    | 'sepa_bit'\n    | 'ideal'\n    | 'sofort'\n    | 'bancontact';\n  usage: UsageTypes;\n}\n\nexport type UsageTypes = 'reusable' | 'single_use';\nexport type FlowTypes = 'redirect' | 'receiver' | 'code_verification' | 'none';\n\nexport interface SourceParams {\n  id: string;\n  client_secret: string;\n}\n\nexport interface SourceData {\n  type?: string;\n  amount?: number;\n  currency?: string;\n  flow?: FlowTypes;\n  metadata?: { [key: string]: any };\n  owner?: {\n    address?: Address;\n    email?: string;\n    name?: string;\n    phone?: string;\n  };\n  redirect?: {\n    [key: string]: any;\n    return_url: string;\n  };\n  token?: string;\n  usage?: UsageTypes;\n}\n\nexport function isSourceData(sourceData: any): sourceData is SourceData {\n  return 'type' in sourceData;\n}\n\nexport interface SourceResult {\n  source?: Source;\n  error?: Error;\n}\n","import { Error } from './utils';\n\nexport interface Token {\n  id: string;\n  object: 'token';\n  bank_account?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'bank_account';\n    account_holder_name: string;\n    account_holder_type: 'individual' | 'company';\n    bank_name: string;\n    last4: string;\n    routing_number: string;\n    status:\n      | 'new'\n      | 'validated'\n      | 'verified'\n      | 'verification_failded'\n      | 'errored';\n  };\n  card?: {\n    id: string;\n    country: string;\n    currency: string;\n    fingerprint: string;\n    object: 'card';\n    address_city: string;\n    address_country: string;\n    address_line1: string;\n    address_line1_check: FieldCheck;\n    address_line2: string;\n    address_state: string;\n    address_zip: string;\n    address_zip_check: FieldCheck;\n    brand: string;\n    cvc_check: FieldCheck;\n    dynamic_last4: string;\n    exp_month: number;\n    exp_year: number;\n    funding: 'credit' | 'debit' | 'prepaid' | 'unknown';\n    last4: string;\n    metadata: { [key: string]: any };\n    name: string;\n    tokenization_method: 'apple_pay' | 'android_pay';\n  };\n  client_ip: string;\n  livemode: boolean;\n  type: 'card' | 'bank_account';\n  used: boolean;\n}\n\nexport type FieldCheck = 'pass' | 'fail' | 'unavailable' | 'unchecked';\n\nexport interface CardDataOptions {\n  name?: string;\n  address_line1?: string;\n  address_line2?: string;\n  address_city?: string;\n  address_state?: string;\n  address_zip?: string;\n  address_country?: string;\n  currency?: string;\n}\n\nexport interface TokenResult {\n  token?: Token;\n  error?: Error;\n}\n\nexport type BankAccount = 'bank_account';\n\nexport interface BankAccountData {\n  country: string;\n  currency: string;\n  routing_number: string;\n  account_number: string;\n  account_holder_name: string;\n  account_holder_type: 'individual' | 'company';\n}\n\nexport type Pii = 'pii';\n\nexport interface PiiData {\n  personal_id_number: string;\n}\n\nexport function isBankAccount(account: any): account is BankAccount {\n  return account === 'bank_account';\n}\n\nexport function isBankAccountData(\n  bankAccountData: any\n): bankAccountData is BankAccountData {\n  return (\n    'country' in bankAccountData &&\n    'currency' in bankAccountData &&\n    'routing_number' in bankAccountData &&\n    'account_number' in bankAccountData &&\n    'account_holder_name' in bankAccountData &&\n    'account_holder_type' in bankAccountData &&\n    (bankAccountData.account_holder_type === 'individual' ||\n      bankAccountData.account_holder_type === 'company')\n  );\n}\n\nexport function isPii(pii: any): pii is Pii {\n  return pii === 'pii';\n}\n\nexport function isPiiData(piiData: any): piiData is PiiData {\n  return 'personal_id_number' in piiData;\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class WindowRef {\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  public getNativeWindow(): Window {\n    if (isPlatformBrowser(this.platformId)) {\n      return window;\n    }\n    return {} as Window;\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class DocumentRef {\n  constructor(@Inject(PLATFORM_ID) private platformId: any) {}\n\n  public getNativeDocument(): Document {\n    if (isPlatformBrowser(this.platformId)) {\n      return document;\n    }\n    return {} as Document;\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformServer } from '@angular/common';\n\nimport { Observable, BehaviorSubject } from 'rxjs';\n\nimport { WindowRef } from './window-ref.service';\nimport { DocumentRef } from './document-ref.service';\n\nexport interface Status {\n  loaded: boolean;\n  loading: boolean;\n  error: boolean;\n}\n\n@Injectable()\nexport class LazyStripeAPILoader {\n  private status: BehaviorSubject<Status> = new BehaviorSubject<Status>({\n    error: false,\n    loaded: false,\n    loading: false\n  });\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    private window: WindowRef,\n    private document: DocumentRef\n  ) {}\n\n  public asStream(): Observable<Status> {\n    this.load();\n    return this.status.asObservable();\n  }\n\n  public isReady(): boolean {\n    return this.status.getValue().loaded;\n  }\n\n  public load() {\n    if (isPlatformServer(this.platformId)) {\n      return;\n    }\n    const status: Status = this.status.getValue();\n    if (this.window.getNativeWindow().hasOwnProperty('Stripe')) {\n      this.status.next({\n        error: false,\n        loaded: true,\n        loading: false\n      });\n    } else if (!status.loaded && !status.loading) {\n      this.status.next({\n        ...status,\n        loading: true\n      });\n\n      const script = this.document.getNativeDocument().createElement('script');\n      script.type = 'text/javascript';\n      script.async = true;\n      script.defer = true;\n      script.src = 'https://js.stripe.com/v3/';\n\n      script.onload = () => {\n        this.status.next({\n          error: false,\n          loaded: true,\n          loading: false\n        });\n      };\n\n      script.onerror = () => {\n        this.status.next({\n          error: true,\n          loaded: false,\n          loading: false\n        });\n      };\n\n      this.document.getNativeDocument().body.appendChild(script);\n    }\n  }\n}\n","import { InjectionToken } from '@angular/core';\n\nimport { Elements, ElementsOptions } from './elements';\nimport { Element } from './element';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  Pii,\n  PiiData\n} from './token';\nimport { SourceData, SourceResult, SourceParams } from './sources';\nimport { PaymentRequestOptions } from './payment-request';\n\nexport const STRIPE_PUBLISHABLE_KEY = new InjectionToken<string>(\n  'Stripe Publishable Key'\n);\nexport const STRIPE_OPTIONS = new InjectionToken<Options>('Stripe Options');\n\nexport interface StripeJS {\n  elements(options?: ElementsOptions): Elements;\n  createToken(el: Element, cardData?: CardDataOptions): Promise<TokenResult>;\n  createToken(\n    account: BankAccount,\n    bankAccountData: BankAccountData\n  ): Promise<TokenResult>;\n  createToken(pii: Pii, piiData: PiiData): Promise<TokenResult>;\n  createSource(el: Element, sourceData?: SourceData): Promise<SourceResult>;\n  createSource(sourceData: SourceData): Promise<SourceResult>;\n  retrieveSource(source: SourceParams): Promise<SourceResult>;\n  paymentRequest(options: PaymentRequestOptions): any;\n}\n\nexport interface Options {\n  stripeAccount?: string;\n}\n","import { Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\nimport { Observable, from, of, BehaviorSubject } from 'rxjs';\nimport { map, filter, switchMap, first } from 'rxjs/operators';\n\nimport { WindowRef } from './window-ref.service';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  StripeJS,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport {\n  SourceData,\n  SourceResult,\n  isSourceData,\n  SourceParams\n} from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData\n} from '../interfaces/token';\nimport { StripeServiceInterface } from './stripe-instance.interface';\nimport { PaymentRequestOptions } from '../interfaces/payment-request';\n\nexport class StripeInstance implements StripeServiceInterface {\n  private stripe$: BehaviorSubject<StripeJS | undefined> = new BehaviorSubject<\n    StripeJS | undefined\n  >(undefined);\n\n  constructor(\n    private platformId: any,\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef,\n    private key: string,\n    private options?: Options\n  ) {\n    this.loader\n      .asStream()\n      .pipe(\n        filter((status: Status) => status.loaded === true),\n        first(),\n        map(() => (this.window.getNativeWindow() as any).Stripe)\n      )\n      .subscribe(Stripe => {\n        const stripe = this.options\n          ? (Stripe(this.key, this.options) as StripeJS)\n          : (Stripe(this.key) as StripeJS);\n\n        this.stripe$.next(stripe);\n      });\n  }\n\n  public getInstance(): StripeJS | undefined {\n    return this.stripe$.getValue();\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripe$.pipe(\n      filter(stripe => Boolean(stripe)),\n      map(stripe => (stripe as StripeJS).elements(options))\n    );\n  }\n\n  public createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    return this.stripe$.pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        if (isBankAccount(a) && isBankAccountData(b)) {\n          return from(stripe.createToken(a, b));\n        } else if (isPii(a) && isPiiData(b)) {\n          return from(stripe.createToken(a, b));\n        } else {\n          return from(\n            stripe.createToken(a as Element, b as CardDataOptions | undefined)\n          );\n        }\n      })\n    );\n  }\n\n  public createSource(\n    a: Element | SourceData,\n    b?: SourceData | undefined\n  ): Observable<SourceResult> {\n    return this.stripe$.pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        if (isSourceData(a)) {\n          return from(stripe.createSource(a as SourceData));\n        }\n        return from(stripe.createSource(a as Element, b));\n      })\n    );\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return this.stripe$.pipe(\n      filter(stripe => Boolean(stripe)),\n      switchMap(s => {\n        const stripe = s as StripeJS;\n\n        return from(stripe.retrieveSource(source));\n      })\n    );\n  }\n\n  public paymentRequest(options: PaymentRequestOptions) {\n    return this.stripe$.pipe(\n      filter(stripe => Boolean(stripe)),\n      map(s => {\n        const stripe = s as StripeJS;\n\n        return stripe.paymentRequest(options);\n      })\n    );\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\n\nimport { WindowRef } from './window-ref.service';\nimport { LazyStripeAPILoader, Status } from './api-loader.service';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  StripeJS,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { Element } from '../interfaces/element';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport {\n  SourceData,\n  SourceResult,\n  isSourceData,\n  SourceParams\n} from '../interfaces/sources';\nimport {\n  CardDataOptions,\n  TokenResult,\n  BankAccount,\n  BankAccountData,\n  PiiData,\n  Pii,\n  isBankAccount,\n  isBankAccountData,\n  isPii,\n  isPiiData\n} from '../interfaces/token';\nimport { StripeInstance } from './stripe-instance.class';\nimport { StripeServiceInterface } from './stripe-instance.interface';\nimport { PaymentRequestOptions } from '../interfaces/payment-request';\n\n@Injectable()\nexport class StripeService implements StripeServiceInterface {\n  private stripe!: StripeInstance;\n\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    @Inject(STRIPE_PUBLISHABLE_KEY) private key: string,\n    @Inject(STRIPE_OPTIONS) private options: Options,\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef\n  ) {\n    if (key) {\n      this.stripe = new StripeInstance(\n        this.platformId,\n        this.loader,\n        this.window,\n        key,\n        options\n      );\n    }\n  }\n\n  public getStripeReference(): Observable<any> {\n    return this.loader\n      .asStream()\n      .pipe(\n        filter((status: Status) => status.loaded === true),\n        map(() => (this.window.getNativeWindow() as any).Stripe)\n      );\n  }\n\n  public getInstance() {\n    return this.stripe.getInstance();\n  }\n\n  public setKey(key: string, options?: Options) {\n    return this.changeKey(key, options);\n  }\n\n  public changeKey(key: string, options?: Options) {\n    this.stripe = new StripeInstance(\n      this.platformId,\n      this.loader,\n      this.window,\n      key,\n      options\n    );\n\n    return this.stripe;\n  }\n\n  public elements(options?: ElementsOptions): Observable<Elements> {\n    return this.stripe.elements(options);\n  }\n\n  public createToken(\n    a: Element | BankAccount | Pii,\n    b: CardDataOptions | BankAccountData | PiiData | undefined\n  ): Observable<TokenResult> {\n    return this.stripe.createToken(a, b);\n  }\n\n  public createSource(\n    a: Element | SourceData,\n    b?: SourceData | undefined\n  ): Observable<SourceResult> {\n    return this.stripe.createSource(a, b);\n  }\n\n  public retrieveSource(source: SourceParams): Observable<SourceResult> {\n    return this.stripe.retrieveSource(source);\n  }\n\n  public paymentRequest(options: PaymentRequestOptions) {\n    return this.stripe.paymentRequest(options);\n  }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { Observable } from 'rxjs';\n\nimport {\n  STRIPE_PUBLISHABLE_KEY,\n  STRIPE_OPTIONS,\n  Options\n} from '../interfaces/stripe';\nimport { LazyStripeAPILoader } from './api-loader.service';\nimport { WindowRef } from './window-ref.service';\nimport { StripeInstance } from './stripe-instance.class';\n\n@Injectable()\nexport class StripeFactoryService {\n  constructor(\n    @Inject(PLATFORM_ID) private platformId: any,\n    @Inject(STRIPE_PUBLISHABLE_KEY) private baseKey: string,\n    @Inject(STRIPE_OPTIONS) private baseOptions: string,\n    private loader: LazyStripeAPILoader,\n    private window: WindowRef\n  ) {}\n\n  public create(key: string, options?: Options): StripeInstance {\n    return new StripeInstance(\n      this.platformId,\n      this.loader,\n      this.window,\n      key,\n      options\n    );\n  }\n}\n","import {\n  Component,\n  Input,\n  OnInit,\n  ViewChild,\n  ElementRef,\n  EventEmitter,\n  Output\n} from '@angular/core';\n\nimport { BehaviorSubject, Observable, combineLatest } from 'rxjs';\nimport { switchMap, filter } from 'rxjs/operators';\n\nimport {\n  Element as StripeElement,\n  ElementOptions,\n  ElementEventType\n} from '../interfaces/element';\nimport { StripeService } from '../services/stripe.service';\nimport { Elements, ElementsOptions } from '../interfaces/elements';\nimport { StripeInstance } from '../services/stripe-instance.class';\n\n@Component({\n  selector: 'ngx-stripe-card',\n  template: `<div class=\"field\" #stripeCard></div>`\n})\nexport class StripeCardComponent implements OnInit {\n  @Output() public card = new EventEmitter<StripeElement>();\n  @Output()\n  public on = new EventEmitter<{ type: ElementEventType; event: any }>();\n\n  @ViewChild('stripeCard') private stripeCard!: ElementRef;\n  private element!: StripeElement;\n  @Input()\n  private set options(optionsIn: ElementOptions) {\n    this.options$.next(optionsIn);\n  }\n  private options$ = new BehaviorSubject<ElementOptions>({});\n  @Input()\n  private set elementsOptions(optionsIn: ElementsOptions) {\n    this.elementsOptions$.next(optionsIn);\n  }\n  private elementsOptions$ = new BehaviorSubject<ElementsOptions>({});\n  @Input()\n  private set stripe(stripeIn: StripeInstance) {\n    this.stripe$.next(stripeIn);\n  }\n  private stripe$ = new BehaviorSubject<StripeInstance | null>(null);\n\n  constructor(private stripeService: StripeService) {}\n\n  public ngOnInit() {\n    const elements$: Observable<Elements> = combineLatest(\n      this.elementsOptions$.asObservable(),\n      this.stripe$.asObservable()\n    ).pipe(\n      switchMap(([options, stripe]) => {\n        if (stripe) {\n          if (Object.keys(options).length > 0) {\n            return stripe.elements(options);\n          }\n          return stripe.elements();\n        } else {\n          if (Object.keys(options).length > 0) {\n            return this.stripeService.elements(options);\n          }\n          return this.stripeService.elements();\n        }\n      })\n    );\n    combineLatest(\n      elements$,\n      this.options$.asObservable().pipe(filter(options => Boolean(options)))\n    ).subscribe(([elements, options]) => {\n      this.element = elements.create('card', options);\n\n      this.element.on('blur', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'blur'\n        })\n      );\n\n      this.element.on('change', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'change'\n        })\n      );\n\n      this.element.on('click', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'click'\n        })\n      );\n\n      this.element.on('focus', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'focus'\n        })\n      );\n\n      this.element.on('ready', ev =>\n        this.on.emit({\n          event: ev,\n          type: 'ready'\n        })\n      );\n\n      this.element.mount(this.stripeCard.nativeElement);\n\n      this.card.emit(this.element);\n    });\n  }\n\n  public getCard(): StripeElement {\n    return this.element;\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { LazyStripeAPILoader } from '../services/api-loader.service';\nimport { StripeService } from '../services/stripe.service';\nimport { StripeFactoryService } from '../services/stripe-factory.service';\n\nimport { WindowRef } from '../services/window-ref.service';\nimport { DocumentRef } from '../services/document-ref.service';\n\nimport {\n  Options,\n  STRIPE_PUBLISHABLE_KEY,\n  STRIPE_OPTIONS\n} from '../interfaces/stripe';\nimport { StripeCardComponent } from '../components/stripe-card.component';\n\n@NgModule({\n  declarations: [StripeCardComponent],\n  exports: [StripeCardComponent]\n})\nexport class NgxStripeModule {\n  public static forRoot(\n    publishableKey?: string,\n    options?: Options\n  ): ModuleWithProviders {\n    return {\n      ngModule: NgxStripeModule,\n      providers: [\n        LazyStripeAPILoader,\n        StripeService,\n        StripeFactoryService,\n        WindowRef,\n        DocumentRef,\n        {\n          provide: STRIPE_PUBLISHABLE_KEY,\n          useValue: publishableKey\n        },\n        {\n          provide: STRIPE_OPTIONS,\n          useValue: options\n        }\n      ]\n    };\n  }\n}\n"],"names":["isSourceData","sourceData","isBankAccount","account","isBankAccountData","bankAccountData","account_holder_type","isPii","pii","isPiiData","piiData","WindowRef","platformId","this","prototype","getNativeWindow","isPlatformBrowser","window","type","Injectable","undefined","decorators","Inject","args","PLATFORM_ID","DocumentRef","getNativeDocument","document","LazyStripeAPILoader","status","BehaviorSubject","error","loaded","loading","asStream","load","asObservable","isReady","getValue","_this","isPlatformServer","hasOwnProperty","next","Object","assign","script","createElement","async","defer","src","onload","onerror","body","appendChild","STRIPE_PUBLISHABLE_KEY","InjectionToken","STRIPE_OPTIONS","StripeInstance","loader","key","options","stripe$","pipe","filter","first","map","Stripe","subscribe","stripe","getInstance","elements","Boolean","createToken","a","b","switchMap","s","from","createSource","retrieveSource","source","paymentRequest","StripeService","getStripeReference","setKey","changeKey","StripeFactoryService","baseKey","baseOptions","create","StripeCardComponent","stripeService","card","EventEmitter","on","options$","elementsOptions$","defineProperty","set","optionsIn","stripeIn","ngOnInit","elements$","combineLatest","_a","keys","length","element","ev","emit","event","mount","stripeCard","nativeElement","getCard","Component","selector","template","Output","ViewChild","Input","elementsOptions","NgxStripeModule","forRoot","publishableKey","ngModule","providers","provide","useValue","NgModule","declarations","exports"],"mappings":"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"}